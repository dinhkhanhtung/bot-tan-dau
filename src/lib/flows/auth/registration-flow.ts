import { BaseFlow } from '../../core/flow-base'
import { SessionManager } from '../../core/session-manager'
import { UnifiedUserStateManager } from '../../core/unified-user-state-manager'
import { UserState, UserType } from '../../../types'
import { supabaseAdmin } from '../../supabase'
import {
    sendMessage,
    sendQuickReply,
    createQuickReply
} from '../../facebook-api'
import { generateId } from '../../utils'

/**
 * Registration Flow - Clean, modular implementation
 * Handles user registration process with consistent session management
 */
export class RegistrationFlow extends BaseFlow {
    readonly flowName = 'registration'

    /**
     * Check if this flow can handle the user/session
     */
    canHandle(user: any, session: any): boolean {
        // Handle null user case
        if (!user || !user.status) {
            return false
        }

        // Can handle if user is not registered and wants to register
        return user.status === 'new_user' ||
            (session && session.current_flow === 'registration')
    }

    /**
     * Handle message input
     */
    async handleMessage(user: any, text: string, session: any): Promise<void> {
        try {
            console.log('üîç Processing step for user:', user.facebook_id)
            console.log('[DEBUG] Session:', JSON.stringify(session, null, 2))
            console.log('[DEBUG] Input:', text)

            // Get current step - SIMPLIFIED
            const currentStep = session?.step || 0
            console.log('üîç Current step:', currentStep)

            // Handle each step
            switch (currentStep) {
                case 0:
                    await this.handleNameStep(user, text)
                    break
                case 1:
                    await this.handlePhoneStep(user, text)
                    break
                case 2:
                    await this.handleLocationStep(user, text)
                    break
                case 3:
                    await this.handleBirthdayStep(user, text)
                    break
                case 4:
                    await this.handleReferralStep(user, text)
                    break
                default:
                    console.log('‚ùå Unknown step:', currentStep)
                    await this.sendErrorMessage(user.facebook_id)
            }

        } catch (error) {
            console.error('‚ùå Step processing error:', error)
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * Handle postback events
     */
    async handlePostback(user: any, payload: string, session: any): Promise<void> {
        try {
            this.logActivity(user, 'handlePostback', { payload, session })

            if (payload === 'REGISTER') {
                await this.startRegistration(user)
            } else if (payload.startsWith('LOC_')) {
                await this.handleLocationPostback(user, payload, session)
            } else if (payload === 'LOC_SHOW_MORE') {
                await this.showMoreLocations(user)
            } else if (payload === 'REG_BIRTHDAY_YES') {
                await this.handleBirthdayVerification(user, 'YES')
            } else if (payload === 'REG_BIRTHDAY_NO') {
                await this.handleBirthdayVerification(user, 'NO')
            } else if (payload === 'CANCEL_REGISTRATION') {
                await this.cancelRegistration(user)
            }

        } catch (error) {
            await this.handleError(user, error, 'handlePostback')
        }
    }

    /**
     * Start registration process - OPTIMIZED WITH PRICING INFO
     */
    private async startRegistration(user: any): Promise<void> {
        try {
            console.log(`üîÑ Starting registration for user: ${user.facebook_id}`)

            // Check if user already registered (including trial users)
            if (user.status === 'registered' || user.status === 'trial' || user.status === 'active') {
                await this.sendAlreadyRegisteredMessage(user)
                return
            }

            // Clear any existing session first
            await SessionManager.deleteSession(user.facebook_id)

            // Create new session
            await SessionManager.createSession(user.facebook_id, 'registration', 0, {
                inactivity_timeout: Date.now() + (5 * 60 * 1000) // 5 minutes timeout
            })

            // Update user state to prevent welcome service interference
            await UnifiedUserStateManager.updateUserState(user.facebook_id, UserState.USING_BOT)

            // Send pricing and benefits info first
            await this.sendRegistrationPricingInfo(user)

        } catch (error) {
            await this.handleError(user, error, 'startRegistration')
        }
    }

    /**
     * Send pricing and benefits information with smooth flow
     */
    private async sendRegistrationPricingInfo(user: any): Promise<void> {
        try {
            // Unified message with referral info
            await sendMessage(user.facebook_id, 'Ch√†o m·ª´ng b·∫°n tham gia Bot T√¢n D·∫≠u - H·ªó Tr·ª£ Ch√©o\n\nüéÅ QUY·ªÄN L·ª¢I: Trial 3 ng√†y mi·ªÖn ph√≠\nüí∞ Ch·ªâ v·ªõi 3,000ƒë m·ªói ng√†y b·∫°n c√≥ c∆° h·ªôi ƒë∆∞·ª£c t√¨m ki·∫øm b·ªüi h∆°n 2 tri·ªáu T√¢n D·∫≠u\nüí≥ Ph√≠ duy tr√¨: 3,000ƒë/ng√†y\nüìÖ G√≥i t·ªëi thi·ªÉu: 3 ng√†y = 9.000 ‚Ç´\n\nüåü C√ì M√É GI·ªöI THI·ªÜU? Nh·∫≠n th√™m 7 ng√†y mi·ªÖn ph√≠!\n\nT√¢n D·∫≠u Vi·ªát - C√πng nhau k·∫øt n·ªëi - c√πng nhau th·ªãnh v∆∞·ª£ng\n\nüöÄ B∆∞·ªõc 1: X√°c nh·∫≠n th√¥ng tin Facebook c·ªßa b·∫°n:')

        } catch (error) {
            console.error('Error sending registration pricing info:', error)
            // Fallback to simple message
            await sendMessage(user.facebook_id, 'üöÄ B∆∞·ªõc 1: X√°c nh·∫≠n th√¥ng tin Facebook c·ªßa b·∫°n:')
        }
    }

    /**
     * Show more locations (second page)
     */
    private async showMoreLocations(user: any): Promise<void> {
        try {
            console.log('[DEBUG] Showing more locations for user:', user.facebook_id)

            // Complete list of Vietnamese provinces + overseas option
            const locations = [
                // Central Vietnam (Mi·ªÅn Trung) - continued
                'üè≠ QU·∫¢NG B√åNH', 'üèîÔ∏è QU·∫¢NG TR·ªä', 'üèòÔ∏è TH·ª™A THI√äN HU·∫æ',

                // Southern Vietnam (Mi·ªÅn Nam) - continued
                'üè¢ TP.HCM', 'üèòÔ∏è ƒê·ªíNG NAI', 'üè≠ B√åNH D∆Ø∆†NG', 'üèîÔ∏è B√åNH PH∆Ø·ªöC', 'üèòÔ∏è T√ÇY NINH',
                'üè≠ B√Ä R·ªäA - V≈®NG T√ÄU', 'üèñÔ∏è C·∫¶N TH∆†', 'üèòÔ∏è AN GIANG', 'üèîÔ∏è KI√äN GIANG', 'üè≠ H·∫¨U GIANG',
                'üèòÔ∏è S√ìC TRƒÇNG', 'üèîÔ∏è B·∫†C LI√äU', 'üè≠ C√Ä MAU', 'üèòÔ∏è ƒê·ªíNG TH√ÅP', 'üèîÔ∏è TI·ªÄN GIANG',
                'üèòÔ∏è B·∫æN TRE', 'üè≠ TR√Ä VINH', 'üèîÔ∏è Vƒ®NH LONG', 'üèòÔ∏è LONG AN', 'üè≠ TI·ªÄN GIANG',

                // Special Administrative Regions
                'üåä QU·∫¶N ƒê·∫¢O TR∆Ø·ªúNG SA', 'üèùÔ∏è QU·∫¶N ƒê·∫¢O HO√ÄNG SA',

                // Overseas option
                'üåç N∆Ø·ªöC NGO√ÄI'
            ]

            const buttons = locations.map(location => {
                // Extract location name without emoji (everything after the first space)
                const locationName = location.substring(location.indexOf(' ') + 1)
                const locationCode = locationName.replace(/\s+/g, '_')
                const payload = `LOC_${locationCode}`
                return createQuickReply(location, payload)
            })

            await sendQuickReply(user.facebook_id, 'üìç B∆∞·ªõc 3/5: Ch·ªçn t·ªânh/th√†nh ph·ªë n∆°i b·∫°n sinh s·ªëng (Trang 2/2 - C√°c t·ªânh c√≤n l·∫°i):', buttons)
            console.log('[DEBUG] More location buttons sent successfully')

        } catch (error) {
            await this.handleError(user, error, 'showMoreLocations')
        }
    }

    /**
     * Delay helper for smooth message flow
     */
    private async delay(ms: number): Promise<void> {
        return new Promise(resolve => setTimeout(resolve, ms))
    }

    /**
     * Handle name input step
     */
    private async handleNameStep(user: any, text: string): Promise<void> {
        console.log('üìù Processing name step for user:', user.facebook_id)

        // Validate name
        if (!text || text.trim().length < 2) {
            await sendMessage(user.facebook_id, '‚ùå T√™n qu√° ng·∫Øn. Vui l√≤ng nh·∫≠p h·ªç t√™n ƒë·∫ßy ƒë·ªß!')
            return
        }

        // Update existing session with name
        const { error } = await supabaseAdmin
            .from('bot_sessions')
            .update({
                step: 1,
                current_step: 1,
                data: { name: text.trim() },
                updated_at: new Date().toISOString()
            })
            .eq('facebook_id', user.facebook_id)

        if (error) {
            console.error('‚ùå Database error:', error)
            await sendMessage(user.facebook_id, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!')
            return
        }

        // Send phone prompt
        await sendMessage(user.facebook_id, `‚úÖ H·ªç t√™n: ${text.trim()}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüì± B∆∞·ªõc 2/5: S·ªë ƒëi·ªán tho·∫°i\nüí° Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ nh·∫≠n th√¥ng b√°o quan tr·ªçng\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nVui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i:`)

        console.log('‚úÖ Name step completed, moved to phone step')
    }

    /**
     * Handle phone input step
     */
    private async handlePhoneStep(user: any, text: string): Promise<void> {
        console.log('üì± Processing phone step for user:', user.facebook_id)

        // Clean phone number
        const phone = text.replace(/\D/g, '').trim()
        console.log('[DEBUG] Cleaned phone number:', phone)

        // Validate phone
        if (phone.length < 10 || phone.length > 11) {
            console.log('[DEBUG] Phone validation failed:', phone.length)
            await sendMessage(user.facebook_id, '‚ùå S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p 10-11 ch·ªØ s·ªë.')
            return
        }

        // Check if phone exists
        console.log('[DEBUG] Checking if phone exists in database...')
        const { data: existingUser } = await supabaseAdmin
            .from('users')
            .select('facebook_id')
            .eq('phone', phone)
            .single()

        if (existingUser && existingUser.facebook_id !== user.facebook_id) {
            console.log('[DEBUG] Phone already exists for another user:', existingUser.facebook_id)
            await sendMessage(user.facebook_id, '‚ùå S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!')
            return
        }

        // Get current session data
        const { data: sessionData } = await supabaseAdmin
            .from('bot_sessions')
            .select('data')
            .eq('facebook_id', user.facebook_id)
            .single()

        const currentData = sessionData?.data || {}

        // Update session with phone data
        const { error } = await supabaseAdmin
            .from('bot_sessions')
            .update({
                step: 2,
                current_step: 2,
                data: {
                    ...currentData,
                    phone: phone
                },
                updated_at: new Date().toISOString()
            })
            .eq('facebook_id', user.facebook_id)

        if (error) {
            console.error('‚ùå Database error:', error)
            await sendMessage(user.facebook_id, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!')
            return
        }

        // Send location buttons (includes the prompt message)
        console.log('[DEBUG] Sending location buttons...')
        await this.sendLocationButtons(user.facebook_id)

        console.log('‚úÖ Phone step completed, moved to location step')
    }

    /**
     * Handle location step (text input)
     */
    private async handleLocationStep(user: any, text: string): Promise<void> {
        try {
            console.log(`üìç Processing location step for user: ${user.facebook_id}`)

            // For now, just show location buttons
            await this.sendLocationButtons(user.facebook_id)

        } catch (error) {
            await this.handleError(user, error, 'handleLocationStep')
        }
    }

    /**
     * Handle birthday step
     */
    private async handleBirthdayStep(user: any, text: string): Promise<void> {
        try {
            console.log(`üéÇ Processing birthday step for user: ${user.facebook_id}`)

            // Validate birthday format (DD/MM/YYYY)
            const birthdayRegex = /^(\d{1,2})\/(\d{1,2})\/(\d{4})$/
            const match = text.match(birthdayRegex)

            if (!match) {
                await sendMessage(user.facebook_id, '‚ùå ƒê·ªãnh d·∫°ng ng√†y sinh kh√¥ng ƒë√∫ng! Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng DD/MM/YYYY')
                return
            }

            const [, day, month, year] = match
            const birthYear = parseInt(year)

            // Check if born in 1981 (T√¢n D·∫≠u)
            if (birthYear !== 1981) {
                await sendMessage(user.facebook_id, '‚ùå Ch·ªâ d√†nh cho ng∆∞·ªùi sinh nƒÉm 1981 (T√¢n D·∫≠u)!')
                return
            }

            // Get current session data
            const currentData = await SessionManager.getSessionData(user.facebook_id)

            // Update session with birthday
            await SessionManager.updateSession(user.facebook_id, {
                step: 4,
                data: {
                    ...currentData,
                    birthday: text.trim()
                }
            })

            // Complete registration
            await this.completeRegistration(user, {
                ...currentData,
                birthday: text.trim()
            })

        } catch (error) {
            await this.handleError(user, error, 'handleBirthdayStep')
        }
    }

    /**
     * Handle location postback
     */
    private async handleLocationPostback(user: any, payload: string, session: any): Promise<void> {
        try {
            console.log('üè† Processing location postback:', payload, 'for user:', user.facebook_id)

            const locationCode = payload.replace('LOC_', '')
            // Convert location code back to proper location name
            const location = locationCode.replace(/_/g, ' ')
            console.log('[DEBUG] Selected location:', location)

            // Get current session data
            const { data: sessionData } = await supabaseAdmin
                .from('bot_sessions')
                .select('data')
                .eq('facebook_id', user.facebook_id)
                .single()

            const currentData = sessionData?.data || {}

            // Update session with location
            const { error } = await supabaseAdmin
                .from('bot_sessions')
                .update({
                    step: 3,
                    current_step: 3,
                    data: {
                        ...currentData,
                        location: location
                    },
                    updated_at: new Date().toISOString()
                })
                .eq('facebook_id', user.facebook_id)

            if (error) {
                console.error('‚ùå Database error:', error)
                await sendMessage(user.facebook_id, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!')
                return
            }

            // Send birthday verification prompt
            await sendMessage(user.facebook_id, `‚úÖ ƒê·ªãa ƒëi·ªÉm: ${location}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüéÇ B∆∞·ªõc 4/5: X√°c nh·∫≠n sinh nƒÉm\nüí° Ch·ªâ d√†nh cho T√¢n D·∫≠u (sinh nƒÉm 1981)\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
            await this.sendBirthdayVerificationButtons(user.facebook_id)

        } catch (error) {
            console.error('‚ùå Location postback error:', error)
            await sendMessage(user.facebook_id, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!')
        }
    }

    /**
     * Complete registration process
     */
    private async completeRegistration(user: any, data: any): Promise<void> {
        try {
            console.log('üéâ Completing registration for user:', user.facebook_id)

            // Validate required data
            if (!data.name || !data.phone || !data.location) {
                console.error('‚ùå Missing registration data:', data)
                await sendMessage(user.facebook_id, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!')
                return
            }

            // Calculate trial days based on referral
            const hasReferral = data.referral_code && data.referral_code !== null
            const trialDays = hasReferral ? 10 : 3 // 3 days base + 7 days bonus if referred
            const trialHours = trialDays * 24 * 60 * 60 * 1000

            console.log(`üìÖ Trial calculation: ${trialDays} days (${hasReferral ? 'with referral bonus' : 'standard'})`)

            // Check if user already exists
            const { data: existingUser, error: checkError } = await supabaseAdmin
                .from('users')
                .select('*')
                .eq('facebook_id', user.facebook_id)
                .single()

            if (checkError && checkError.code !== 'PGRST116') {
                console.error('‚ùå Error checking existing user:', checkError)
                await sendMessage(user.facebook_id, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!')
                return
            }

            // Prepare user data
            const userData = {
                name: data.name,
                phone: data.phone,
                location: data.location,
                birthday: data.birthday || '01/01', // Default to Jan 1st if not provided
                status: 'trial',
                membership_expires_at: new Date(Date.now() + trialHours).toISOString(),
                referral_code: `TD1981-${user.facebook_id.slice(-6)}`,
                updated_at: new Date().toISOString()
            }

            if (existingUser) {
                // User already exists, update their information
                console.log('üìù User already exists, updating information:', existingUser.id)

                const { error: updateError } = await supabaseAdmin
                    .from('users')
                    .update(userData)
                    .eq('facebook_id', user.facebook_id)

                if (updateError) {
                    console.error('‚ùå Database update error:', updateError)
                    await sendMessage(user.facebook_id, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!')
                    return
                }
            } else {
                // User doesn't exist, create new record
                console.log('üÜï Creating new user record')

                const { error: insertError } = await supabaseAdmin
                    .from('users')
                    .insert({
                        ...userData,
                        id: generateId(),
                        facebook_id: user.facebook_id,
                        created_at: new Date().toISOString()
                    })

                if (insertError) {
                    console.error('‚ùå Database insert error:', insertError)
                    await sendMessage(user.facebook_id, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!')
                    return
                }
            }

            // Save referral information if exists
            if (hasReferral) {
                try {
                    // Get referrer info
                    const { data: referrer } = await supabaseAdmin
                        .from('users')
                        .select('id')
                        .eq('referral_code', data.referral_code)
                        .single()

                    if (referrer) {
                        // Create referral record
                        await supabaseAdmin
                            .from('referrals')
                            .insert({
                                id: generateId(),
                                referrer_id: referrer.id,
                                referred_id: existingUser?.id || generateId(), // Will be updated after user creation
                                status: 'completed',
                                reward_amount: 0, // No monetary reward, just trial extension
                                created_at: new Date().toISOString(),
                                completed_at: new Date().toISOString()
                            })
                    }
                } catch (referralError) {
                    console.error('‚ùå Error saving referral:', referralError)
                    // Don't fail registration if referral save fails
                }
            }

            // Clear session
            await supabaseAdmin
                .from('bot_sessions')
                .delete()
                .eq('facebook_id', user.facebook_id)

            // Send success message with correct trial days
            const trialMessage = hasReferral
                ? `üåü B·∫°n ƒë∆∞·ª£c d√πng th·ª≠ mi·ªÖn ph√≠ ${trialDays} ng√†y (c√≥ m√£ gi·ªõi thi·ªáu)!`
                : `üéÅ B·∫°n ƒë∆∞·ª£c d√πng th·ª≠ mi·ªÖn ph√≠ ${trialDays} ng√†y!`

            await sendMessage(user.facebook_id, `üéâ ƒêƒÇNG K√ù TH√ÄNH C√îNG!\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚úÖ H·ªç t√™n: ${data.name}\n‚úÖ SƒêT: ${data.phone}\n‚úÖ ƒê·ªãa ƒëi·ªÉm: ${data.location}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n${trialMessage}\nüöÄ Ch√∫c b·∫°n s·ª≠ d·ª•ng bot vui v·∫ª!`)

            // Add delay for better UX
            await this.delay(1500)

            // Send navigation buttons for new registered user
            await sendQuickReply(user.facebook_id, 'üéØ B√¢y gi·ªù b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng t·∫•t c·∫£ t√≠nh nƒÉng c·ªßa bot:', [
                createQuickReply('üîç T√åM KI·∫æM S·∫¢N PH·∫®M', 'SEARCH'),
                createQuickReply('üìù ƒêƒÇNG B√ÅN H√ÄNG', 'LISTING'),
                createQuickReply('üë• C·ªòNG ƒê·ªíNG T√ÇN D·∫¨U', 'COMMUNITY'),
                createQuickReply('üí∞ THANH TO√ÅN', 'PAYMENT'),
                createQuickReply('‚ÑπÔ∏è TH√îNG TIN', 'INFO')
            ])

            // Update user state to USING_BOT since they're now registered
            await UnifiedUserStateManager.updateUserState(user.facebook_id, UserState.USING_BOT)

            // Also update user type to reflect registered status
            await UnifiedUserStateManager.setUserType(user.facebook_id, UserType.REGISTERED_USER)

            console.log('‚úÖ Registration completed successfully!')

        } catch (error) {
            console.error('‚ùå Registration completion error:', error)
            await sendMessage(user.facebook_id, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!')
        }
    }

    /**
     * Cancel registration
     */
    private async cancelRegistration(user: any): Promise<void> {
        try {
            await SessionManager.deleteSession(user.facebook_id)
            await sendMessage(user.facebook_id, '‚ùå ƒê√£ h·ªßy ƒëƒÉng k√Ω. Ch√†o t·∫°m bi·ªát!')
        } catch (error) {
            await this.handleError(user, error, 'cancelRegistration')
        }
    }



    /**
     * Send already registered message
     */
    private async sendAlreadyRegisteredMessage(user: any): Promise<void> {
        await sendMessage(user.facebook_id,
            `‚úÖ B·∫°n ƒë√£ ƒëƒÉng k√Ω r·ªìi!\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüéØ S·ª≠ d·ª•ng c√°c t√≠nh nƒÉng:\n‚Ä¢ ƒêƒÉng tin b√°n h√†ng\n‚Ä¢ T√¨m ki·∫øm s·∫£n ph·∫©m\n‚Ä¢ C·ªông ƒë·ªìng T√¢n D·∫≠u\n‚Ä¢ Thanh to√°n online\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nCh·ªçn t√≠nh nƒÉng b·∫°n mu·ªën s·ª≠ d·ª•ng:`)
    }

    /**
     * Send location buttons - COMPLETE VIETNAMESE PROVINCES LIST
     */
    private async sendLocationButtons(facebookId: string): Promise<void> {
        console.log('[DEBUG] sendLocationButtons: Creating location buttons for user:', facebookId)

        // Get current session data to include phone number in the message
        const { data: sessionData } = await supabaseAdmin
            .from('bot_sessions')
            .select('data')
            .eq('facebook_id', facebookId)
            .single()

        const currentData = sessionData?.data || {}
        const phone = currentData.phone || 'Ch∆∞a c·∫≠p nh·∫≠t'

        // Complete list of Vietnamese provinces + overseas option
        const locations = [
            // Northern Vietnam (Mi·ªÅn B·∫Øc)
            'üè† H√Ä N·ªòI', 'üè≠ H·∫¢I PH√íNG', 'üèîÔ∏è QU·∫¢NG NINH', 'üåä NAM ƒê·ªäNH', 'üèòÔ∏è TH√ÅI B√åNH',
            'üåæ NINH B√åNH', 'üèõÔ∏è H·∫¢I D∆Ø∆†NG', 'üè≠ H∆ØNG Y√äN', 'üå≥ B·∫ÆC NINH', 'üèîÔ∏è B·∫ÆC GIANG',
            'üèòÔ∏è B·∫ÆC K·∫†N', 'üå≤ CAO B·∫∞NG', 'üèîÔ∏è L·∫†NG S∆†N', 'üå≤ TH√ÅI NGUY√äN', 'üè≠ PH√ö TH·ªå',
            'üèòÔ∏è TUY√äN QUANG', 'üå≤ H√Ä GIANG', 'üèîÔ∏è LAO CAI', 'üåä Y√äN B√ÅI', 'üèòÔ∏è ƒêI·ªÜN BI√äN',
            'üè≠ H√íA B√åNH', 'üå≤ S∆†N LA', 'üèîÔ∏è LAI CH√ÇU', 'üèòÔ∏è Vƒ®NH PH√öC',

            // Central Vietnam (Mi·ªÅn Trung)
            'üèõÔ∏è TH·ª™A THI√äN HU·∫æ', 'üèñÔ∏è ƒê√Ä N·∫¥NG', 'üèîÔ∏è QU·∫¢NG NAM', 'üèòÔ∏è QU·∫¢NG NG√ÉI', 'üè≠ B√åNH ƒê·ªäNH',
            'üèîÔ∏è PH√ö Y√äN', 'üèòÔ∏è KH√ÅNH H√íA', 'üèñÔ∏è NINH THU·∫¨N', 'üèúÔ∏è B√åNH THU·∫¨N', 'üèîÔ∏è KON TUM',
            'üèòÔ∏è GIA LAI', 'üè≠ ƒê·∫ÆK L·∫ÆK', 'üèîÔ∏è ƒê·∫ÆK N√îNG', 'üèòÔ∏è L√ÇM ƒê·ªíNG', 'üè≠ QU·∫¢NG B√åNH',
            'üèîÔ∏è QU·∫¢NG TR·ªä', 'üèòÔ∏è TH·ª™A THI√äN HU·∫æ', 'üèîÔ∏è QU·∫¢NG NAM',

            // Southern Vietnam (Mi·ªÅn Nam)
            'üè¢ TP.HCM', 'üèòÔ∏è ƒê·ªíNG NAI', 'üè≠ B√åNH D∆Ø∆†NG', 'üèîÔ∏è B√åNH PH∆Ø·ªöC', 'üèòÔ∏è T√ÇY NINH',
            'üè≠ B√Ä R·ªäA - V≈®NG T√ÄU', 'üèñÔ∏è C·∫¶N TH∆†', 'üèòÔ∏è AN GIANG', 'üèîÔ∏è KI√äN GIANG', 'üè≠ H·∫¨U GIANG',
            'üèòÔ∏è S√ìC TRƒÇNG', 'üèîÔ∏è B·∫†C LI√äU', 'üè≠ C√Ä MAU', 'üèòÔ∏è ƒê·ªíNG TH√ÅP', 'üèîÔ∏è TI·ªÄN GIANG',
            'üèòÔ∏è B·∫æN TRE', 'üè≠ TR√Ä VINH', 'üèîÔ∏è Vƒ®NH LONG', 'üèòÔ∏è LONG AN', 'üè≠ TI·ªÄN GIANG',

            // Special Administrative Regions
            'üåä QU·∫¶N ƒê·∫¢O TR∆Ø·ªúNG SA', 'üèùÔ∏è QU·∫¶N ƒê·∫¢O HO√ÄNG SA',

            // Overseas option
            'üåç N∆Ø·ªöC NGO√ÄI'
        ]

        console.log('[DEBUG] Location options count:', locations.length)

        // Split into multiple pages if needed (Facebook allows max 11 buttons per message)
        const buttonsPerPage = 10
        const totalPages = Math.ceil(locations.length / buttonsPerPage)

        if (totalPages === 1) {
            // Single page - send all buttons
            const buttons = locations.map(location => {
                // Extract location name without emoji (everything after the first space)
                const locationName = location.substring(location.indexOf(' ') + 1)
                const locationCode = locationName.replace(/\s+/g, '_')
                const payload = `LOC_${locationCode}`
                return createQuickReply(location, payload)
            })

            await sendQuickReply(facebookId, `‚úÖ SƒêT: ${phone}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüìç B∆∞·ªõc 3/5: Ch·ªçn t·ªânh/th√†nh ph·ªë\nüí° Ch·ªçn n∆°i b·∫°n sinh s·ªëng ƒë·ªÉ k·∫øt n·ªëi v·ªõi c·ªông ƒë·ªìng ƒë·ªãa ph∆∞∆°ng\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüìç B∆∞·ªõc 3/5: Ch·ªçn t·ªânh/th√†nh ph·ªë n∆°i b·∫°n sinh s·ªëng (T·∫•t c·∫£ t·ªânh th√†nh Vi·ªát Nam + N∆∞·ªõc ngo√†i):`, buttons)
        } else {
            // Multiple pages - send first page with "Xem th√™m" option
            const firstPageLocations = locations.slice(0, buttonsPerPage - 1) // Reserve 1 slot for "Xem th√™m"
            const buttons = firstPageLocations.map(location => {
                // Extract location name without emoji (everything after the first space)
                const locationName = location.substring(location.indexOf(' ') + 1)
                const locationCode = locationName.replace(/\s+/g, '_')
                const payload = `LOC_${locationCode}`
                return createQuickReply(location, payload)
            })

            // Add "Xem th√™m" button
            buttons.push(createQuickReply('üìã XEM TH√äM T·ªàNH TH√ÄNH', 'LOC_SHOW_MORE'))

            await sendQuickReply(facebookId, `‚úÖ SƒêT: ${phone}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüìç B∆∞·ªõc 3/5: Ch·ªçn t·ªânh/th√†nh ph·ªë\nüí° Ch·ªçn n∆°i b·∫°n sinh s·ªëng ƒë·ªÉ k·∫øt n·ªëi v·ªõi c·ªông ƒë·ªìng ƒë·ªãa ph∆∞∆°ng\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüìç B∆∞·ªõc 3/5: Ch·ªçn t·ªânh/th√†nh ph·ªë n∆°i b·∫°n sinh s·ªëng (Trang 1/${totalPages}):`, buttons)
        }

        console.log('[DEBUG] Location buttons sent successfully')
    }

    /**
     * Send birthday verification buttons
     */
    private async sendBirthdayVerificationButtons(facebookId: string): Promise<void> {
        const buttons = [
            createQuickReply('‚úÖ ƒê√∫ng v·∫≠y, t√¥i sinh nƒÉm 1981', 'REG_BIRTHDAY_YES'),
            createQuickReply('‚ùå Kh√¥ng ph·∫£i, t√¥i sinh nƒÉm kh√°c', 'REG_BIRTHDAY_NO')
        ]

        await sendQuickReply(facebookId, 'üéÇ B·∫°n c√≥ sinh nƒÉm 1981 (T√¢n D·∫≠u) kh√¥ng?', buttons)
    }

    /**
     * Handle birthday verification - EXACT COPY FROM OLD LOGIC
     */
    private async handleBirthdayVerification(user: any, answer: string): Promise<void> {
        try {
            console.log('üéÇ Processing birthday verification:', answer, 'for user:', user.facebook_id)

            if (answer === 'YES') {
                // User confirmed they were born in 1981 - go to referral step
                const { data: sessionData } = await supabaseAdmin
                    .from('bot_sessions')
                    .select('data')
                    .eq('facebook_id', user.facebook_id)
                    .single()

                if (sessionData && sessionData.data) {
                    // Update session with birthday and move to referral step
                    await SessionManager.updateSession(user.facebook_id, {
                        step: 4,
                        data: {
                            ...sessionData.data,
                            birthday: '1981' // Set default birthday since they confirmed
                        }
                    })

                    // Send referral prompt
                    await sendMessage(user.facebook_id, `‚úÖ X√°c nh·∫≠n sinh nƒÉm 1981\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüåü B∆∞·ªõc 5/5: M√£ gi·ªõi thi·ªáu (T√πy ch·ªçn)\nüí° C√≥ m√£ gi·ªõi thi·ªáu? Nh·∫≠n th√™m 7 ng√†y mi·ªÖn ph√≠!\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüìù Nh·∫≠p m√£ gi·ªõi thi·ªáu ho·∫∑c g√µ "B·ªè qua":`)
                } else {
                    await sendMessage(user.facebook_id, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!')
                }
            } else if (answer === 'NO') {
                // User is not born in 1981 - cannot register
                await supabaseAdmin
                    .from('bot_sessions')
                    .delete()
                    .eq('facebook_id', user.facebook_id)

                await sendMessage(user.facebook_id, '‚ùå XIN L·ªñI')
                await sendMessage(user.facebook_id, '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')
                await sendMessage(user.facebook_id, 'üòî Bot T√¢n D·∫≠u - H·ªó Tr·ª£ Ch√©o ch·ªâ d√†nh ri√™ng cho nh·ªØng ng∆∞·ªùi con T√¢n D·∫≠u sinh nƒÉm 1981.')
                await sendMessage(user.facebook_id, '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')
                await sendMessage(user.facebook_id, 'üí° N·∫øu b·∫°n sinh nƒÉm kh√°c, b·∫°n c√≥ th·ªÉ:')
                await sendMessage(user.facebook_id, '‚Ä¢ Li√™n h·ªá ƒêinh Kh√°nh T√πng ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n')
                await sendMessage(user.facebook_id, '‚Ä¢ Tham gia c√°c c·ªông ƒë·ªìng kh√°c ph√π h·ª£p h∆°n')
                await sendMessage(user.facebook_id, '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')
                await sendMessage(user.facebook_id, 'üìû Li√™n h·ªá: 0982581222')
                await sendMessage(user.facebook_id, 'üìß Email: dinhkhanhtung@outlook.com')
            } else {
                await sendMessage(user.facebook_id, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!')
            }

        } catch (error) {
            console.error('‚ùå Birthday verification error:', error)
            await sendMessage(user.facebook_id, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!')
        }
    }

    /**
     * Handle referral code step
     */
    private async handleReferralStep(user: any, text: string): Promise<void> {
        try {
            console.log(`üåü Processing referral step for user: ${user.facebook_id}`)

            // Get current session data
            const currentData = await SessionManager.getSessionData(user.facebook_id)

            // Check if user wants to skip
            if (text.toLowerCase().trim() === 'b·ªè qua' || text.toLowerCase().trim() === 'bo qua') {
                // Complete registration without referral
                await this.completeRegistration(user, {
                    ...currentData,
                    referral_code: null
                })
                return
            }

            // Validate referral code format (TD1981-XXXXXX)
            const referralRegex = /^TD1981-\d{6}$/
            if (!referralRegex.test(text.trim())) {
                await sendMessage(user.facebook_id, '‚ùå M√£ gi·ªõi thi·ªáu kh√¥ng h·ª£p l·ªá! M√£ ph·∫£i c√≥ ƒë·ªãnh d·∫°ng TD1981-XXXXXX\nüìù Ho·∫∑c g√µ "B·ªè qua" ƒë·ªÉ ti·∫øp t·ª•c:')
                return
            }

            // Check if referral code exists
            const { data: referrer } = await supabaseAdmin
                .from('users')
                .select('facebook_id')
                .eq('referral_code', text.trim())
                .single()

            if (!referrer) {
                await sendMessage(user.facebook_id, '‚ùå M√£ gi·ªõi thi·ªáu kh√¥ng t·ªìn t·∫°i!\nüìù Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c g√µ "B·ªè qua" ƒë·ªÉ ti·∫øp t·ª•c:')
                return
            }

            // Check if user is trying to use their own code
            if (referrer.facebook_id === user.facebook_id) {
                await sendMessage(user.facebook_id, '‚ùå Kh√¥ng th·ªÉ s·ª≠ d·ª•ng m√£ gi·ªõi thi·ªáu c·ªßa ch√≠nh m√¨nh!\nüìù Vui l√≤ng nh·∫≠p m√£ kh√°c ho·∫∑c g√µ "B·ªè qua" ƒë·ªÉ ti·∫øp t·ª•c:')
                return
            }

            // Update session with referral code
            await SessionManager.updateSession(user.facebook_id, {
                step: 5,
                data: {
                    ...currentData,
                    referral_code: text.trim()
                }
            })

            // Complete registration with referral bonus
            await this.completeRegistration(user, {
                ...currentData,
                referral_code: text.trim()
            })

        } catch (error) {
            await this.handleError(user, error, 'handleReferralStep')
        }
    }
}
