/**
 * Smart Menu Service - Qu·∫£n l√Ω menu ƒë·ªông theo ng·ªØ c·∫£nh user
 * ƒê∆°n gi·∫£n h√≥a tr·∫£i nghi·ªám ng∆∞·ªùi d√πng v·ªõi menu ph√π h·ª£p
 */

import { sendQuickReply, createQuickReply } from '../facebook-api'
import { logger } from '../logger'

export enum MenuContext {
    CHOOSING_MODE = 'choosing_mode',    // Menu ch·ªçn ch·∫ø ƒë·ªô s·ª≠ d·ª•ng
    BOT_FEATURES = 'bot_features',      // Menu t√≠nh nƒÉng bot
    ADMIN_CHAT = 'admin_chat',          // Menu khi chat v·ªõi admin
    BACK_TO_MAIN = 'back_to_main'       // Menu v·ªÅ trang ch·ªß
}

export interface MenuOption {
    title: string
    payload: string
    description?: string
}

export class SmartMenuService {
    /**
     * L·∫•y menu ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh hi·ªán t·∫°i
     */
    static getMenuForContext(context: MenuContext): MenuOption[] {
        switch (context) {
            case MenuContext.CHOOSING_MODE:
                return this.getChoosingModeMenu()

            case MenuContext.BOT_FEATURES:
                return this.getBotFeaturesMenu()

            case MenuContext.ADMIN_CHAT:
                return this.getAdminChatMenu()

            case MenuContext.BACK_TO_MAIN:
                return this.getBackToMainMenu()

            default:
                return this.getDefaultMenu()
        }
    }

    /**
     * G·ª≠i menu ch·ªçn ch·∫ø ƒë·ªô s·ª≠ d·ª•ng
     */
    static async sendChoosingModeMenu(facebookId: string): Promise<void> {
        try {
            const menuOptions = this.getChoosingModeMenu()

            await sendQuickReply(facebookId,
                'üéØ CH·ªåN CH·∫æ ƒê·ªò S·ª¨ D·ª§NG\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nB·∫°n mu·ªën l√†m g√¨ h√¥m nay?',
                menuOptions.map(option => createQuickReply(option.title, option.payload))
            )

            logger.info('Sent choosing mode menu', { facebookId })
        } catch (error) {
            logger.error('Error sending choosing mode menu', { facebookId, error })
        }
    }

    /**
     * G·ª≠i menu t√≠nh nƒÉng bot
     */
    static async sendBotFeaturesMenu(facebookId: string): Promise<void> {
        try {
            const menuOptions = this.getBotFeaturesMenu()

            await sendQuickReply(facebookId,
                'ü§ñ T√çNH NƒÇNG BOT T√ÇN D·∫¨U\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nCh·ªçn ch·ª©c nƒÉng b·∫°n mu·ªën s·ª≠ d·ª•ng:',
                menuOptions.map(option => createQuickReply(option.title, option.payload))
            )

            logger.info('Sent bot features menu', { facebookId })
        } catch (error) {
            logger.error('Error sending bot features menu', { facebookId, error })
        }
    }

    /**
     * G·ª≠i menu khi chat v·ªõi admin
     */
    static async sendAdminChatMenu(facebookId: string): Promise<void> {
        try {
            const menuOptions = this.getAdminChatMenu()

            await sendQuickReply(facebookId,
                'üí¨ H·ªñ TR·ª¢ T·ª™ ADMIN\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nAdmin ƒêinh Kh√°nh T√πng s·∫Ω h·ªó tr·ª£ b·∫°n:',
                menuOptions.map(option => createQuickReply(option.title, option.payload))
            )

            logger.info('Sent admin chat menu', { facebookId })
        } catch (error) {
            logger.error('Error sending admin chat menu', { facebookId, error })
        }
    }

    /**
     * Menu ch·ªçn ch·∫ø ƒë·ªô s·ª≠ d·ª•ng (l·ª±a ch·ªçn ch√≠nh)
     */
    private static getChoosingModeMenu(): MenuOption[] {
        return [
            {
                title: 'üöÄ D√ôNG BOT',
                payload: 'USE_BOT',
                description: 'T·ª± ƒë·ªông mua b√°n v·ªõi c·ªông ƒë·ªìng'
            },
            {
                title: 'üí¨ CHAT V·ªöI ADMIN',
                payload: 'CHAT_ADMIN',
                description: 'ƒêinh Kh√°nh T√πng h·ªó tr·ª£ tr·ª±c ti·∫øp'
            }
        ]
    }

    /**
     * Menu t√≠nh nƒÉng bot
     */
    private static getBotFeaturesMenu(): MenuOption[] {
        return [
            {
                title: 'üöÄ ƒêƒÇNG K√ù TH√ÄNH VI√äN',
                payload: 'REGISTER',
                description: 'ƒêƒÉng k√Ω ƒë·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng'
            },
            {
                title: 'üõí ƒêƒÇNG TIN B√ÅN H√ÄNG',
                payload: 'LISTING',
                description: 'ƒêƒÉng s·∫£n ph·∫©m ƒë·ªÉ b√°n'
            },
            {
                title: 'üîç T√åM KI·∫æM S·∫¢N PH·∫®M',
                payload: 'SEARCH',
                description: 'T√¨m s·∫£n ph·∫©m c·∫ßn mua'
            },
            {
                title: 'üë• C·ªòNG ƒê·ªíNG T√ÇN D·∫¨U',
                payload: 'COMMUNITY',
                description: 'K·∫øt n·ªëi v·ªõi c·ªông ƒë·ªìng'
            },
            {
                title: 'üí¨ LI√äN H·ªÜ ADMIN',
                payload: 'CONTACT_ADMIN',
                description: 'Nh·∫≠n h·ªó tr·ª£ t·ª´ admin'
            },
            {
                title: 'üè† V·ªÄ MENU CH√çNH',
                payload: 'BACK_TO_MAIN',
                description: 'Quay l·∫°i l·ª±a ch·ªçn ch√≠nh'
            }
        ]
    }

    /**
     * Menu khi chat v·ªõi admin
     */
    private static getAdminChatMenu(): MenuOption[] {
        return [
            {
                title: 'üè† V·ªÄ MENU CH√çNH',
                payload: 'BACK_TO_MAIN',
                description: 'Quay l·∫°i l·ª±a ch·ªçn ch·∫ø ƒë·ªô s·ª≠ d·ª•ng'
            },
            {
                title: '‚ùì TR·ª¢ GI√öP',
                payload: 'GET_HELP',
                description: 'Xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng'
            }
        ]
    }

    /**
     * Menu d·ª± ph√≤ng khi c√≥ l·ªói
     */
    private static getBackToMainMenu(): MenuOption[] {
        return [
            {
                title: 'üè† V·ªÄ MENU CH√çNH',
                payload: 'BACK_TO_MAIN',
                description: 'Quay l·∫°i trang ch·ªß'
            }
        ]
    }

    /**
     * Menu m·∫∑c ƒë·ªãnh khi kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng·ªØ c·∫£nh
     */
    private static getDefaultMenu(): MenuOption[] {
        return this.getChoosingModeMenu()
    }

    /**
     * L·∫•y th√¥ng tin m√¥ t·∫£ cho m·ªôt payload c·ª• th·ªÉ
     */
    static getOptionDescription(payload: string): string | null {
        const allOptions = [
            ...this.getChoosingModeMenu(),
            ...this.getBotFeaturesMenu(),
            ...this.getAdminChatMenu()
        ]

        const option = allOptions.find(opt => opt.payload === payload)
        return option?.description || null
    }

    /**
     * Ki·ªÉm tra payload c√≥ h·ª£p l·ªá kh√¥ng
     */
    static isValidPayload(payload: string): boolean {
        const allOptions = [
            ...this.getChoosingModeMenu(),
            ...this.getBotFeaturesMenu(),
            ...this.getAdminChatMenu()
        ]

        return allOptions.some(option => option.payload === payload)
    }
}
