import { sendMessage, sendTypingIndicator, sendQuickReply, createQuickReply } from '../facebook-api'
import { SmartContextManager, UserContext, UserType, UserState } from './smart-context-manager'
import { UnifiedBotSystem } from './unified-entry-point'
import { updateBotSession, getBotSession } from '../utils'

// Flow Adapter - C·∫ßu n·ªëi gi·ªØa h·ªá th·ªëng c≈© v√† m·ªõi
export class FlowAdapter {

    /**
     * Adapter ƒë·ªÉ t√≠ch h·ª£p Smart Router v√†o bot-handlers hi·ªán t·∫°i
     * Kh√¥ng l√†m break h·ªá th·ªëng c≈©, ch·ªâ th√™m t√≠nh nƒÉng m·ªõi
     */
    static async adaptMessageHandling(user: any, text: string): Promise<boolean> {
        try {
            // B∆∞·ªõc 1: Ki·ªÉm tra xem c√≥ n√™n s·ª≠ d·ª•ng Smart Router kh√¥ng
            const shouldUseSmartRouter = await this.shouldUseSmartRouter(user, text)

            if (shouldUseSmartRouter) {
                // B∆∞·ªõc 2: S·ª≠ d·ª•ng Smart Router
                await UnifiedBotSystem.handleMessage(user, text)
                return true // ƒê√£ x·ª≠ l√Ω b·ªüi Smart Router
            }

            // B∆∞·ªõc 3: Fallback v·ªÅ h·ªá th·ªëng c≈© n·∫øu c·∫ßn
            return false // Ch∆∞a x·ª≠ l√Ω, ƒë·ªÉ h·ªá th·ªëng c≈© x·ª≠ l√Ω

        } catch (error) {
            console.error('Error in flow adapter:', error)
            return false // Fallback v·ªÅ h·ªá th·ªëng c≈©
        }
    }

    /**
     * Adapter cho postback handling
     */
    static async adaptPostbackHandling(user: any, postback: string): Promise<boolean> {
        try {
            // Ki·ªÉm tra xem postback c√≥ ph·∫£i t·ª´ Smart Router kh√¥ng
            if (this.isSmartRouterAction(postback)) {
                await UnifiedBotSystem.handleMessage(user, '', true, postback)
                return true
            }

            return false // ƒê·ªÉ h·ªá th·ªëng c≈© x·ª≠ l√Ω

        } catch (error) {
            console.error('Error in postback adapter:', error)
            return false
        }
    }

    /**
     * Ki·ªÉm tra xem c√≥ n√™n s·ª≠ d·ª•ng Smart Router kh√¥ng
     * ƒêi·ªÅu ki·ªán: tin nh·∫Øn ƒë·∫ßu ti√™n ho·∫∑c c√°c t·ª´ kh√≥a ƒë·∫∑c bi·ªát
     */
    private static async shouldUseSmartRouter(user: any, text: string): Promise<boolean> {
        // Lu√¥n s·ª≠ d·ª•ng Smart Router cho c√°c tr∆∞·ªùng h·ª£p sau:
        // 1. Tin nh·∫Øn b·∫Øt ƒë·∫ßu b·∫±ng "ch√†o", "hi", "hello"
        // 2. Tin nh·∫Øn l√† "start", "menu", "home"
        // 3. Tin nh·∫Øn l√† c√°c t·ª´ kh√≥a ph·ªï bi·∫øn
        // 4. User m·ªõi ho√†n to√†n (ch∆∞a c√≥ session)

        const smartKeywords = [
            'ch√†o', 'hi', 'hello', 'xin ch√†o',
            'start', 'menu', 'home', 'trang ch·ªß',
            'b·∫Øt ƒë·∫ßu', 'kh·ªüi ƒë·ªông', 'b·∫Øt ƒë·∫ßu l·∫°i',
            'gi√∫p t√¥i', 'h·ªó tr·ª£', 't∆∞ v·∫•n',
            't√¥i mu·ªën', 't√¥i c·∫ßn', 'b·∫°n ∆°i'
        ]

        const lowerText = text.toLowerCase()

        // Ki·ªÉm tra t·ª´ kh√≥a th√¥ng minh
        const hasSmartKeyword = smartKeywords.some(keyword => lowerText.includes(keyword))

        if (hasSmartKeyword) {
            return true
        }

        // Ki·ªÉm tra user m·ªõi ho√†n to√†n
        const context = await SmartContextManager.analyzeUserContext(user)
        if (context.userType === UserType.NEW_USER && context.userState === UserState.IDLE) {
            return true
        }

        // Ki·ªÉm tra session r·ªóng
        const session = await getBotSession(user.facebook_id)
        if (!session) {
            return true
        }

        return false
    }

    /**
     * Ki·ªÉm tra xem action c√≥ ph·∫£i t·ª´ Smart Router kh√¥ng
     */
    private static isSmartRouterAction(action: string): boolean {
        const smartActions = [
            // Admin actions
            'ADMIN_PAYMENTS', 'ADMIN_USERS', 'ADMIN_LISTINGS', 'ADMIN_STATS',
            'ADMIN_NOTIFICATIONS', 'ADMIN_SETTINGS',
            // User actions
            'MAIN_MENU', 'LISTING', 'SEARCH', 'COMMUNITY', 'PAYMENT', 'POINTS', 'SETTINGS',
            // New user actions
            'REGISTER', 'INFO', 'SUPPORT',
            // Flow actions
            'CONTINUE_REGISTRATION', 'CANCEL_REGISTRATION',
            'CONTINUE_LISTING', 'CANCEL_LISTING',
            'CONTINUE_SEARCH', 'CANCEL_SEARCH'
        ]

        return smartActions.includes(action)
    }

    /**
     * Migrate t·ª´ h·ªá th·ªëng c≈© sang Smart Router m·ªôt c√°ch an to√†n
     */
    static async migrateToSmartRouter(user: any): Promise<void> {
        try {
            // Clear session c≈© ƒë·ªÉ b·∫Øt ƒë·∫ßu fresh v·ªõi Smart Router
            await updateBotSession(user.facebook_id, null)

            // G·ª≠i welcome message t·ª´ Smart Router
            await UnifiedBotSystem.handleMessage(user, 'start')

        } catch (error) {
            console.error('Error migrating to Smart Router:', error)
            // Fallback: g·ª≠i welcome message c∆° b·∫£n
            await sendTypingIndicator(user.facebook_id)
            await sendMessage(user.facebook_id, 'üëã Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot T√¢n D·∫≠u - H·ªó Tr·ª£ Ch√©o!')
        }
    }

    /**
     * Fallback handler khi Smart Router g·∫∑p l·ªói
     */
    static async handleFallback(user: any, error: any): Promise<void> {
        console.error('Smart Router error, falling back to legacy system:', error)

        try {
            // Fallback v·ªÅ welcome message c∆° b·∫£n
            await sendTypingIndicator(user.facebook_id)
            await sendMessage(user.facebook_id, 'üëã Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot T√¢n D·∫≠u - H·ªó Tr·ª£ Ch√©o!')

            await sendQuickReply(
                user.facebook_id,
                'B·∫°n mu·ªën:',
                [
                    createQuickReply('üöÄ ƒêƒÇNG K√ù', 'REGISTER'),
                    createQuickReply('‚ÑπÔ∏è TH√îNG TIN', 'INFO'),
                    createQuickReply('üí¨ H·ªñ TR·ª¢', 'SUPPORT')
                ]
            )

        } catch (fallbackError) {
            console.error('Fallback handler also failed:', fallbackError)
        }
    }
}
