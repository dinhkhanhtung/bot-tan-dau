import { sendMessage, sendTypingIndicator, sendQuickReply, createQuickReply } from '../facebook-api'
import { SmartContextManager, UserContext, UserType, UserState } from './smart-context-manager'
import { CONFIG } from '../config'
import { logger, logUserAction, logBotEvent, logError } from '../logger'
import { errorHandler, createUserError, ErrorType } from '../error-handler'
import { getUserByFacebookId, getBotSession, getBotStatus } from '../database-service'
import { supabaseAdmin } from '../supabase'
import { welcomeService, WelcomeType } from '../welcome-service'
import { messageProcessor } from './message-processor'
import { FlowManager } from './flow-manager'
import { FlowInitializer } from './flow-initializer'
import { UserInteractionService } from '../user-interaction-service'
import { AdminTakeoverService } from '../admin-takeover-service'
import { UtilityHandlers } from '../handlers/utility-handlers'
import { MarketplaceHandlers } from '../handlers/marketplace-handlers'
import { UserModeService, UserMode } from './user-mode-service'

/**
 * Unified Bot System - Main entry point for bot message processing
 * Handles all incoming messages with proper routing and flow management
 */
export class UnifiedBotSystem {
    private static initialized = false

    /**
     * Initialize the bot system (call once at startup)
     */
    static initialize(): void {
        if (this.initialized) {
            console.log('‚ö†Ô∏è Bot system already initialized')
            return
        }

        console.log('üöÄ Initializing Unified Bot System...')
        FlowInitializer.initialize()
        this.initialized = true
        console.log('‚úÖ Unified Bot System initialized successfully')
    }

    /**
     * Main entry point for processing all incoming messages
     * ƒê∆°n gi·∫£n h√≥a logic v·ªõi UserModeService v√† welcome service t√≠ch h·ª£p
     */
    static async handleMessage(user: any, text: string, isPostback?: boolean, postback?: string): Promise<void> {
        const startTime = Date.now()

        try {
            logger.info('Processing message', {
                facebook_id: user.facebook_id,
                text: text,
                isPostback: isPostback,
                postback: postback
            })

            // Step 1: Check bot status
            const botStatus = await getBotStatus()
            if (botStatus === 'stopped') {
                logger.info('Bot is stopped, ignoring message', { facebook_id: user.facebook_id })
                return
            }

            // Step 2: Check if admin is active for this user
            const isAdminActive = await AdminTakeoverService.isAdminActive(user.facebook_id)
            if (isAdminActive) {
                logger.info('Admin is active for user, ignoring bot message', { facebook_id: user.facebook_id })
                return
            }

            // Step 3: Ki·ªÉm tra tr·∫°ng th√°i user mode
            const currentMode = await UserModeService.getUserMode(user.facebook_id)

            // N·∫øu ch∆∞a c√≥ mode, ki·ªÉm tra xem ƒë√£ g·ª≠i welcome ch∆∞a
            if (!currentMode) {
                const userData = await getUserByFacebookId(user.facebook_id)
                const welcomeAlreadySent = userData?.welcome_sent || userData?.welcome_message_sent

                if (!welcomeAlreadySent) {
                    // Ch∆∞a g·ª≠i welcome, g·ª≠i welcome k√®m menu ch·ªçn ch·∫ø ƒë·ªô
                    await welcomeService.sendWelcome(user.facebook_id, WelcomeType.NEW_USER)
                    // ƒê·ª£i 2 gi√¢y ƒë·ªÉ user ƒë·ªçc welcome message
                    await this.delay(2000)
                    await UserModeService.sendChoosingMenu(user.facebook_id)
                } else {
                    // ƒê√£ g·ª≠i welcome r·ªìi, ch·ªâ g·ª≠i menu ch·ªçn ch·∫ø ƒë·ªô
                    await UserModeService.sendChoosingMenu(user.facebook_id)
                }
                return
            }

            // Step 4: X·ª≠ l√Ω theo mode hi·ªán t·∫°i
            if (currentMode.current_mode === UserMode.CHATTING_ADMIN) {
                // User ƒëang chat v·ªõi admin - kh√¥ng x·ª≠ l√Ω bot
                logger.info('User is chatting with admin, ignoring bot message', { facebook_id: user.facebook_id })
                return
            }

            if (currentMode.current_mode === UserMode.USING_BOT) {
                // User ƒëang d√πng bot - x·ª≠ l√Ω b√¨nh th∆∞·ªùng
                await this.handleBotUserMessage(user, text, isPostback, postback)
                return
            }

            // N·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô CHOOSING ho·∫∑c kh√¥ng x√°c ƒë·ªãnh - g·ª≠i menu ch·ªçn l·∫°i
            await UserModeService.sendChoosingMenu(user.facebook_id)

            const duration = Date.now() - startTime
            logBotEvent('message_processed', {
                facebook_id: user.facebook_id,
                duration,
                isPostback: !!isPostback
            })

        } catch (error) {
            const duration = Date.now() - startTime
            const messageError = createUserError(
                `Message processing failed: ${error instanceof Error ? error.message : String(error)}`,
                ErrorType.USER_ERROR,
                {
                    facebook_id: user.facebook_id,
                    text,
                    isPostback,
                    postback,
                    duration
                },
                user.facebook_id
            )

            logError(messageError, { operation: 'message_processing', user, text, isPostback, postback })
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * X·ª≠ l√Ω tin nh·∫Øn c·ªßa user ƒëang d√πng bot
     */
    private static async handleBotUserMessage(user: any, text: string, isPostback?: boolean, postback?: string): Promise<void> {
        try {
            // X·ª≠ l√Ω postback
            if (isPostback && postback) {
                await this.handleBotPostback(user, postback)
                return
            }

            // X·ª≠ l√Ω text message
            if (text) {
                // Th·ª≠ x·ª≠ l√Ω b·∫±ng handlers tr∆∞·ªõc
                const handledByUtility = await UtilityHandlers.handleSpecialKeywords(user, text)
                if (!handledByUtility) {
                    const handledByMarketplace = await MarketplaceHandlers.handleMarketplaceKeywords(user, text)
                    if (!handledByMarketplace) {
                        // Kh√¥ng handler n√†o x·ª≠ l√Ω ƒë∆∞·ª£c, d√πng FlowManager
                        await FlowManager.handleMessage(user, text)
                    }
                }
            }
        } catch (error) {
            logError(error as Error, { operation: 'handle_bot_user_message', user, text, postback })
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * X·ª≠ l√Ω postback cho user ƒëang d√πng bot
     */
    private static async handleBotPostback(user: any, postback: string): Promise<void> {
        try {
            // X·ª≠ l√Ω c√°c postback ƒë·∫∑c bi·ªát c·ªßa UserModeService
            switch (postback) {
                case 'USE_BOT':
                    await UserModeService.handleUseBot(user.facebook_id)
                    return // Kh√¥ng g·ªçi FlowManager n·ªØa
                case 'CHAT_ADMIN':
                    await UserModeService.handleChatWithAdmin(user.facebook_id)
                    return // Kh√¥ng g·ªçi FlowManager n·ªØa
                case 'BACK_TO_MAIN':
                    await UserModeService.handleBackToMain(user.facebook_id)
                    return // Kh√¥ng g·ªçi FlowManager n·ªØa
            }

            // C√°c postback kh√°c x·ª≠ l√Ω b·∫±ng FlowManager
            await FlowManager.handlePostback(user, postback)
        } catch (error) {
            logError(error as Error, { operation: 'handle_bot_postback', user, postback })
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * Handle default message when no flow is triggered
     */
    static async handleDefaultMessage(user: any): Promise<void> {
        try {
            // Analyze user context
            const context = await this.analyzeUserContext(user)

            switch (context.userType) {
                case UserType.NEW_USER:
                    await this.handleNewUser(user)
                    break
                case UserType.PENDING_USER:
                    await this.handlePendingUser(user)
                    break
                case UserType.REGISTERED_USER:
                    await this.handleRegisteredUser(user)
                    break
                case UserType.TRIAL_USER:
                    await this.handleTrialUser(user)
                    break
                case UserType.EXPIRED_USER:
                    await this.handleExpiredUser(user)
                    break
                default:
                    await this.handleUnknownUser(user)
            }

        } catch (error) {
            logError(error as Error, { operation: 'handle_default_message', user })
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * Analyze user context
     */
    private static async analyzeUserContext(user: any): Promise<UserContext> {
        try {
            return await SmartContextManager.analyzeUserContext(user)
        } catch (error) {
            logError(error as Error, { operation: 'analyze_user_context', user })
            return {
                userType: UserType.NEW_USER,
                userState: UserState.IDLE,
                user: user,
                session: null,
                isInFlow: false
            }
        }
    }

    /**
     * Handle new user - REMOVED DUPLICATE WELCOME LOGIC
     * Welcome logic is now handled by welcome-service.ts
     */
    private static async handleNewUser(user: any): Promise<void> {
        // This method is no longer needed as welcome logic is handled by welcome-service.ts
        // Keeping method for compatibility but removing duplicate welcome messages
        console.log('handleNewUser called but welcome handled by welcome-service.ts')
    }

    /**
     * Handle pending user
     */
    private static async handlePendingUser(user: any): Promise<void> {
        try {
            await sendMessage(user.facebook_id,
                `‚è≥ T√ÄI KHO·∫¢N ƒêANG CH·ªú DUY·ªÜT\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüìã ƒê∆°n ƒëƒÉng k√Ω c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c xem x√©t\n‚è∞ Th·ªùi gian duy·ªát: 1-2 ng√†y l√†m vi·ªác\nüìû Li√™n h·ªá admin n·∫øu c·∫ßn h·ªó tr·ª£\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)

            await sendQuickReply(user.facebook_id, 'T√πy ch·ªçn:', [
                createQuickReply('üí¨ LI√äN H·ªÜ ADMIN', 'CONTACT_ADMIN'),
                createQuickReply('üîç T√åM KI·∫æM S·∫¢N PH·∫®M', 'SEARCH'),
                createQuickReply('‚ÑπÔ∏è TH√îNG TIN', 'INFO')
            ])

        } catch (error) {
            logError(error as Error, { operation: 'handle_pending_user', user })
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * Handle registered user
     */
    private static async handleRegisteredUser(user: any): Promise<void> {
        try {
            await sendMessage(user.facebook_id,
                `üëã CH√ÄO M·ª™NG TR·ªû L·∫†I!\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüéØ B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng t·∫•t c·∫£ t√≠nh nƒÉng\nüõí ƒêƒÉng tin b√°n h√†ng\nüîç T√¨m ki·∫øm s·∫£n ph·∫©m\nüë• Tham gia c·ªông ƒë·ªìng\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)

            await sendQuickReply(user.facebook_id, 'Ch·ªçn t√≠nh nƒÉng:', [
                createQuickReply('üìù ƒêƒÇNG TIN', 'LISTING'),
                createQuickReply('üîç T√åM KI·∫æM', 'SEARCH'),
                createQuickReply('üë• C·ªòNG ƒê·ªíNG', 'COMMUNITY'),
                createQuickReply('üí∞ THANH TO√ÅN', 'PAYMENT'),
                createQuickReply('‚ÑπÔ∏è TH√îNG TIN', 'INFO')
            ])

        } catch (error) {
            logError(error as Error, { operation: 'handle_registered_user', user })
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * Handle trial user
     */
    private static async handleTrialUser(user: any): Promise<void> {
        try {
            const trialEnd = new Date(user.trial_end)
            const daysLeft = Math.ceil((trialEnd.getTime() - Date.now()) / (1000 * 60 * 60 * 24))

            await sendMessage(user.facebook_id,
                `üéÅ T√ÄI KHO·∫¢N D√ôNG TH·ª¨\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚è∞ C√≤n l·∫°i: ${daysLeft} ng√†y\nüéØ S·ª≠ d·ª•ng t·∫•t c·∫£ t√≠nh nƒÉng\nüí≥ N√¢ng c·∫•p ƒë·ªÉ ti·∫øp t·ª•c\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)

            await sendQuickReply(user.facebook_id, 'Ch·ªçn t√≠nh nƒÉng:', [
                createQuickReply('üìù ƒêƒÇNG TIN', 'LISTING'),
                createQuickReply('üîç T√åM KI·∫æM', 'SEARCH'),
                createQuickReply('üë• C·ªòNG ƒê·ªíNG', 'COMMUNITY'),
                createQuickReply('üí≥ N√ÇNG C·∫§P', 'UPGRADE'),
                createQuickReply('‚ÑπÔ∏è TH√îNG TIN', 'INFO')
            ])

        } catch (error) {
            logError(error as Error, { operation: 'handle_trial_user', user })
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * Handle expired user
     */
    private static async handleExpiredUser(user: any): Promise<void> {
        try {
            await sendMessage(user.facebook_id,
                `‚è∞ T√ÄI KHO·∫¢N ƒê√É H·∫æT H·∫†N\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüí≥ Gia h·∫°n ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng\nüéÅ ∆Øu ƒë√£i ƒë·∫∑c bi·ªát cho th√†nh vi√™n c≈©\nüìû Li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)

            await sendQuickReply(user.facebook_id, 'T√πy ch·ªçn:', [
                createQuickReply('üí≥ GIA H·∫†N', 'RENEW'),
                createQuickReply('üí¨ LI√äN H·ªÜ ADMIN', 'CONTACT_ADMIN'),
                createQuickReply('‚ÑπÔ∏è TH√îNG TIN', 'INFO')
            ])

        } catch (error) {
            logError(error as Error, { operation: 'handle_expired_user', user })
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * Handle unknown user
     */
    private static async handleUnknownUser(user: any): Promise<void> {
        try {
            await sendMessage(user.facebook_id,
                `‚ùì KH√îNG X√ÅC ƒê·ªäNH ƒê∆Ø·ª¢C TR·∫†NG TH√ÅI\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüîÑ Vui l√≤ng th·ª≠ l·∫°i sau\nüìû Li√™n h·ªá admin n·∫øu v·∫•n ƒë·ªÅ ti·∫øp t·ª•c\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)

            await sendQuickReply(user.facebook_id, 'T√πy ch·ªçn:', [
                createQuickReply('üîÑ TH·ª¨ L·∫†I', 'RETRY'),
                createQuickReply('üí¨ LI√äN H·ªÜ ADMIN', 'CONTACT_ADMIN'),
                createQuickReply('‚ÑπÔ∏è TH√îNG TIN', 'INFO')
            ])

        } catch (error) {
            logError(error as Error, { operation: 'handle_unknown_user', user })
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * Send error message
     */
    private static async sendErrorMessage(facebookId: string): Promise<void> {
        try {
            await sendMessage(facebookId, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!')
        } catch (error) {
            logError(error as Error, { operation: 'send_error_message', facebookId })
        }
    }

    /**
     * Helper method to add delay between messages
     */
    private static async delay(ms: number): Promise<void> {
        return new Promise(resolve => setTimeout(resolve, ms))
    }
}
