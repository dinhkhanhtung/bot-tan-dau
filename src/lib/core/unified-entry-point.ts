import { sendMessage, sendTypingIndicator, sendQuickReply, createQuickReply } from '../facebook-api'
import { SmartContextManager, UserContext, UserType, UserState } from './smart-context-manager'
import { updateBotSession } from '../utils'

// Unified Bot System - H·ªá th·ªëng bot th·ªëng nh·∫•t, thay th·∫ø c·∫£ Unified Entry Point v√† Message Router
export class UnifiedBotSystem {

    /**
     * X·ª≠ l√Ω T·∫§T C·∫¢ tin nh·∫Øn - ƒë√¢y l√† ƒëi·ªÉm v√†o DUY NH·∫§T
     */
    static async handleMessage(user: any, text: string, isPostback?: boolean, postback?: string): Promise<void> {
        try {
            console.log('üîç Received message from user:', {
                facebook_id: user.facebook_id,
                text: text,
                isPostback: isPostback,
                postback: postback
            })

            // B∆∞·ªõc 1: KI·ªÇM TRA ADMIN TR∆Ø·ªöC (∆∞u ti√™n cao nh·∫•t)
            const isAdminUser = await this.checkAdminStatus(user.facebook_id)

            if (isAdminUser) {
                console.log('‚úÖ User is admin, handling admin message')
                await this.handleAdminMessage(user, text, isPostback, postback)
                return
            }

            // Ki·ªÉm tra l·ªánh admin ƒë·∫∑c bi·ªát
            if (text && (text.toLowerCase().includes('/admin') || text.toLowerCase().includes('admin'))) {
                console.log('üîç Admin command detected, checking admin status again')
                const isAdminUser2 = await this.checkAdminStatus(user.facebook_id)
                if (isAdminUser2) {
                    console.log('‚úÖ User is admin via command, showing admin dashboard')
                    await this.showAdminDashboard(user)
                    return
                }
            }

            // B∆∞·ªõc 2: KI·ªÇM TRA ADMIN CHAT MODE - SIMPLIFIED
            const isInAdminChat = await this.checkAdminChatMode(user.facebook_id)
            if (isInAdminChat) {
                const { sendMessage } = await import('../facebook-api')
                await sendMessage(user.facebook_id, 'üí¨ B·∫°n ƒëang trong ch·∫ø ƒë·ªô chat v·ªõi admin. Bot s·∫Ω t·∫°m d·ª´ng ƒë·ªÉ admin c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n tr·ª±c ti·∫øp.')
                return
            }

            // B∆∞·ªõc 3: KI·ªÇM TRA SESSION TR∆Ø·ªöC - ∆ØU TI√äN FLOW (QUAN TR·ªåNG NH·∫§T)
            const session = await this.getUserSession(user.facebook_id)
            const currentFlow = session?.current_flow || null

            console.log('üîç Session check:', { currentFlow, session })

            // N·∫øu ƒëang trong flow h·ª£p l·ªá, x·ª≠ l√Ω flow tr∆∞·ªõc, KH√îNG √°p d·ª•ng ch·ªëng spam
            if (currentFlow && ['registration', 'listing', 'search'].includes(currentFlow)) {
                console.log('üîÑ User ƒëang trong flow:', currentFlow, '- X·ª≠ l√Ω flow tr∆∞·ªõc, B·ªé QUA ch·ªëng spam')
                await this.handleFlowMessage(user, text, session)
                return
            }

            // B∆∞·ªõc 4: X·ª¨ L√ù TIN NH·∫ÆN TH∆Ø·ªúNG
            if (isPostback && postback) {
                await this.handlePostbackAction(user, postback)
            } else if (text) {
                await this.handleTextMessage(user, text)
            } else {
                await this.handleDefaultMessage(user)
            }

        } catch (error) {
            console.error('Error in unified bot system:', error)
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i admin
     */
    private static async checkAdminStatus(facebookId: string): Promise<boolean> {
        try {
            console.log('üîç Checking admin status for:', facebookId)
            const { isAdmin } = await import('../utils')
            const result = await isAdmin(facebookId)
            console.log('üîç Admin check result:', result)
            return result
        } catch (error) {
            console.error('Error checking admin status:', error)
            return false
        }
    }

    /**
     * Ki·ªÉm tra admin chat mode
     */
    private static async checkAdminChatMode(facebookId: string): Promise<boolean> {
        try {
            const { isUserInAdminChat } = await import('../admin-chat')
            return await isUserInAdminChat(facebookId)
        } catch (error) {
            console.error('Error checking admin chat mode:', error)
            return false
        }
    }

    /**
     * L·∫•y user session
     */
    private static async getUserSession(facebookId: string): Promise<any> {
        try {
            const { getBotSession } = await import('../utils')
            return await getBotSession(facebookId)
        } catch (error) {
            console.error('Error getting user session:', error)
            return null
        }
    }

    /**
     * Ki·ªÉm tra spam status - S·ª¨ D·ª§NG LOGIC M·ªöI
     */
    private static async checkSpamStatus(facebookId: string, text: string, isPostback?: boolean, userStatus?: string, currentFlow?: string | null): Promise<{ shouldStop: boolean, reason?: string }> {
        try {
            // N·∫øu l√† postback (t∆∞∆°ng t√°c n√∫t b·∫•m) -> kh√¥ng √°p d·ª•ng ch·ªëng spam
            if (isPostback) {
                return { shouldStop: false }
            }

            // N·∫øu c√≥ text -> √°p d·ª•ng logic ch·ªëng spam th√¥ng minh
            if (text) {
                const { handleAntiSpam } = await import('../anti-spam')
                const result = await handleAntiSpam(facebookId, text, userStatus || 'unregistered', currentFlow)

                if (result.block) {
                    return { shouldStop: true, reason: result.message }
                }
            }

            return { shouldStop: false }
        } catch (error) {
            console.error('Error checking spam status:', error)
            return { shouldStop: false }
        }
    }

    /**
     * X·ª≠ l√Ω tin nh·∫Øn c·ªßa admin
     */
    private static async handleAdminMessage(user: any, text: string, isPostback?: boolean, postback?: string): Promise<void> {
        try {
            // Admin c√≥ to√†n quy·ªÅn, kh√¥ng b·ªã gi·ªõi h·∫°n g√¨
            if (isPostback && postback) {
                await this.handleAdminPostback(user, postback)
            } else if (text) {
                await this.handleAdminTextMessage(user, text)
            } else {
                await this.showAdminDashboard(user)
            }
        } catch (error) {
            console.error('Error handling admin message:', error)
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * X·ª≠ l√Ω admin chat message
     */
    private static async handleAdminChatMessage(user: any, text: string): Promise<void> {
        try {
            const { handleUserMessageInAdminChat } = await import('../admin-chat')
            if (text) {
                await handleUserMessageInAdminChat(user.facebook_id, text)
            }
        } catch (error) {
            console.error('Error handling admin chat message:', error)
        }
    }

    /**
     * X·ª≠ l√Ω flow message
     */
    private static async handleFlowMessage(user: any, text: string, session?: any): Promise<void> {
        try {
            // Ki·ªÉm tra session h·ª£p l·ªá
            if (!session || !session.current_flow) {
                await this.sendErrorMessage(user.facebook_id)
                return
            }

            // X·ª≠ l√Ω c√°c l·ªánh tho√°t flow
            if (text && this.isExitCommand(text)) {
                await this.handleFlowExit(user, session.current_flow)
                return
            }

            // Route ƒë·∫øn flow handler ph√π h·ª£p
            switch (session.current_flow) {
                case 'registration':
                    const { AuthFlow } = await import('../flows/auth-flow')
                    const authFlow = new AuthFlow()
                    await authFlow.handleStep(user, text || '', session)
                    break
                case 'listing':
                    const { MarketplaceFlow } = await import('../flows/marketplace-flow')
                    const marketplaceFlow = new MarketplaceFlow()
                    await marketplaceFlow.handleStep(user, text || '', session)
                    break
                case 'search':
                    const { MarketplaceFlow: SearchFlow } = await import('../flows/marketplace-flow')
                    const searchFlow = new SearchFlow()
                    await searchFlow.handleSearchStep(user, text || '', session)
                    break
                default:
                    await this.sendErrorMessage(user.facebook_id)
            }
        } catch (error) {
            console.error('Error handling flow message:', error)
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * X·ª≠ l√Ω postback actions
     */
    private static async handlePostbackAction(user: any, postback: string): Promise<void> {
        try {
            const [action, ...params] = postback.split('_')

            // Ki·ªÉm tra user type ƒë·ªÉ route ƒë√∫ng handler
            const context = await this.analyzeUserContext(user)

            if (context.userType === UserType.PENDING_USER) {
                const { PendingUserFlow } = await import('../flows/pending-user-flow')
                const pendingUserFlow = new PendingUserFlow()
                await pendingUserFlow.handlePostback(user, postback)
                return
            }

            switch (action) {
                case 'REGISTER':
                    // Ki·ªÉm tra xem user ƒë√£ c√≥ session registration ch∆∞a
                    const { getBotSession } = await import('../utils')
                    const existingSession = await getBotSession(user.facebook_id)

                    if (existingSession && existingSession.session_data?.current_flow === 'registration') {
                        // User ƒë√£ trong flow registration, kh√¥ng g·ª≠i l·∫°i welcome
                        console.log('User already in registration flow, skipping duplicate welcome')
                        return
                    }

                    await this.startRegistration(user)
                    break
                case 'INFO':
                    // X·ª≠ l√Ω n√∫t T√åM HI·ªÇU TH√äM - CH·ªà hi·ªÉn th·ªã th√¥ng tin, KH√îNG ƒëƒÉng k√Ω
                    await this.showBotInfo(user)
                    break
                case 'CONTACT':
                    if (params[0] === 'ADMIN') {
                        await this.showSupportInfo(user)
                    }
                    break
                case 'MAIN':
                    if (params[0] === 'MENU') {
                        await this.showMainMenu(user)
                    }
                    break
                case 'MAIN_MENU':
                    await this.showMainMenu(user)
                    break
                case 'ADMIN':
                    await this.showAdminDashboard(user)
                    break
                default:
                    await this.routeToHandler(user, postback)
            }
        } catch (error) {
            console.error('Error handling postback action:', error)
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * X·ª≠ l√Ω text message
     */
    private static async handleTextMessage(user: any, text: string): Promise<void> {
        try {
            // Ph√¢n t√≠ch ng·ªØ c·∫£nh ƒë∆°n gi·∫£n v√† r√µ r√†ng
            const context = await this.analyzeUserContext(user)

            switch (context.userType) {
                case UserType.ADMIN:
                    await this.handleAdminTextMessage(user, text)
                    break
                case UserType.REGISTERED_USER:
                case UserType.TRIAL_USER:
                    await this.handleRegisteredUserText(user, text, context)
                    break
                case UserType.PENDING_USER:
                    await this.handlePendingUserText(user, text, context)
                    break
                case UserType.EXPIRED_USER:
                    await this.handleExpiredUserText(user, text)
                    break
                case UserType.NEW_USER:
                default:
                    await this.handleNewUserText(user, text)
                    break
            }
        } catch (error) {
            console.error('Error handling text message:', error)
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * Ph√¢n t√≠ch ng·ªØ c·∫£nh ƒë∆°n gi·∫£n v√† r√µ r√†ng
     */
    private static async analyzeUserContext(user: any): Promise<{ userType: UserType, user?: any }> {
        try {
            // 1. Ki·ªÉm tra Admin tr∆∞·ªõc (∆∞u ti√™n cao nh·∫•t)
            const isAdminUser = await this.checkAdminStatus(user.facebook_id)
            if (isAdminUser) {
                return { userType: UserType.ADMIN }
            }

            // 2. L·∫•y th√¥ng tin user t·ª´ database
            const { supabaseAdmin } = await import('../supabase')
            const { data: userData, error } = await supabaseAdmin
                .from('users')
                .select('*')
                .eq('facebook_id', user.facebook_id)
                .single()

            // N·∫øu kh√¥ng t√¨m th·∫•y user trong database -> NEW USER
            if (error || !userData) {
                console.log('‚ùå No user data found for:', user.facebook_id, 'Error:', error?.message)
                return { userType: UserType.NEW_USER, user: null }
            }

            // 3. KI·ªÇM TRA TR·∫†NG TH√ÅI USER - R√ï R√ÄNG
            console.log('‚úÖ User data found:', {
                facebook_id: userData.facebook_id,
                status: userData.status,
                name: userData.name,
                phone: userData.phone,
                membership_expires_at: userData.membership_expires_at
            })

            // KI·ªÇM TRA USER C√ì TH√îNG TIN ƒê·∫¶Y ƒê·ª¶ KH√îNG
            if (!userData.name || !userData.phone) {
                console.log('üö´ User missing required info, treating as NEW USER')
                return { userType: UserType.NEW_USER, user: null }
            }

            // KI·ªÇM TRA USER ƒêANG CH·ªú DUY·ªÜT
            if (userData.status === 'pending') {
                console.log('‚è≥ User pending approval, treating as PENDING_USER')
                return { userType: UserType.PENDING_USER, user: userData }
            }

            if (userData.status === 'registered') {
                return { userType: UserType.REGISTERED_USER, user: userData }
            } else if (userData.status === 'trial') {
                // Ki·ªÉm tra trial c√≥ h·∫øt h·∫°n kh√¥ng
                if (userData.membership_expires_at) {
                    const expiryDate = new Date(userData.membership_expires_at)
                    const now = new Date()

                    if (expiryDate <= now) {
                        console.log('Trial user expired, treating as expired user')
                        return { userType: UserType.EXPIRED_USER, user: userData }
                    }
                }
                return { userType: UserType.TRIAL_USER, user: userData }
            } else if (userData.status === 'pending') {
                // User ƒëang ch·ªù admin duy·ªát
                console.log('User pending approval, treating as pending user')
                return { userType: UserType.NEW_USER, user: userData }
            } else if (userData.status === 'expired') {
                return { userType: UserType.EXPIRED_USER, user: userData }
            }

            // 4. N·∫øu status kh√¥ng x√°c ƒë·ªãnh -> coi nh∆∞ NEW USER
            console.log('‚ùì Unknown user status:', userData.status, 'treating as new user')
            return { userType: UserType.NEW_USER, user: null }
        } catch (error) {
            console.error('‚ùå Error analyzing user context:', error)
            return { userType: UserType.NEW_USER }
        }
    }

    /**
     * X·ª≠ l√Ω admin text message
     */
    private static async handleAdminTextMessage(user: any, text: string): Promise<void> {
        try {
            const { handleAdminCommand } = await import('../handlers/admin-handlers')
            await handleAdminCommand(user)
        } catch (error) {
            console.error('Error handling admin text:', error)
            await this.showAdminDashboard(user)
        }
    }

    /**
     * X·ª≠ l√Ω registered user text
     */
    private static async handleRegisteredUserText(user: any, text: string, context: any): Promise<void> {
        try {
            // X·ª≠ l√Ω c√°c l·ªánh text ƒë∆°n gi·∫£n
            if (text.includes('ƒëƒÉng k√Ω') || text.includes('ƒêƒÇNG K√ù')) {
                await this.sendMessage(user.facebook_id, '‚úÖ B·∫°n ƒë√£ ƒëƒÉng k√Ω r·ªìi!')
                await this.showMainMenu(user)
            } else if (text.includes('ni√™m y·∫øt') || text.includes('NI√äM Y·∫æT')) {
                await this.routeToHandler(user, 'LISTING')
            } else if (text.includes('t√¨m ki·∫øm') || text.includes('T√åM KI·∫æM')) {
                await this.routeToHandler(user, 'SEARCH')
            } else {
                await this.showMainMenu(user)
            }
        } catch (error) {
            console.error('Error handling registered user text:', error)
            await this.showMainMenu(user)
        }
    }

    /**
     * X·ª≠ l√Ω expired user text
     */
    private static async handleExpiredUserText(user: any, text: string): Promise<void> {
        try {
            if (text.includes('thanh to√°n') || text.includes('THANH TO√ÅN')) {
                await this.routeToHandler(user, 'PAYMENT')
            } else {
                await this.sendMessage(user.facebook_id, '‚è∞ T√†i kho·∫£n ƒë√£ h·∫øt h·∫°n')
                await this.sendMessage(user.facebook_id, 'üí∞ Vui l√≤ng thanh to√°n ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng')
                await this.routeToHandler(user, 'PAYMENT')
            }
        } catch (error) {
            console.error('Error handling expired user text:', error)
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * X·ª≠ l√Ω pending user text
     */
    private static async handlePendingUserText(user: any, text: string, context: any): Promise<void> {
        try {
            const { PendingUserFlow } = await import('../flows/pending-user-flow')
            const pendingUserFlow = new PendingUserFlow()
            await pendingUserFlow.handleMessage(user, text)
        } catch (error) {
            console.error('Error handling pending user text:', error)
            await this.showWelcomeMessage(user)
        }
    }

    /**
     * X·ª≠ l√Ω new user text - LOGIC TH√îNG MINH V·ªöI SPAM CHECK
     */
    private static async handleNewUserText(user: any, text: string): Promise<void> {
        try {
            // KI·ªÇM TRA SPAM TR∆Ø·ªöC - S·ª¨ D·ª§NG ANTI-SPAM SYSTEM
            const { handleAntiSpam } = await import('../anti-spam')
            const spamResult = await handleAntiSpam(user.facebook_id, text, user.status || 'new', null)

            if (spamResult.block) {
                console.log('User b·ªã block do spam:', spamResult.message || 'Spam detected')
                return
            }

            // N·∫øu spam check ƒë√£ x·ª≠ l√Ω (g·ª≠i welcome), kh√¥ng c·∫ßn x·ª≠ l√Ω th√™m
            if (spamResult.action === 'none' && spamResult.message) {
                console.log('Anti-spam ƒë√£ x·ª≠ l√Ω tin nh·∫Øn, kh√¥ng c·∫ßn x·ª≠ l√Ω th√™m')
                return
            }

            // X·ª≠ l√Ω c√°c l·ªánh ƒë·∫∑c bi·ªát - CH·ªà khi ch∆∞a b·ªã spam check x·ª≠ l√Ω
            if (spamResult.action === 'none' && !spamResult.message) {
                if (text.includes('ƒëƒÉng k√Ω') || text.includes('ƒêƒÇNG K√ù')) {
                    await this.startRegistration(user)
                } else if (text.includes('th√¥ng tin') || text.includes('TH√îNG TIN')) {
                    await this.showBotInfo(user)
                } else if (text.includes('h·ªó tr·ª£') || text.includes('H·ªñ TR·ª¢')) {
                    await this.showSupportInfo(user)
                } else {
                    // X·ª≠ l√Ω tin nh·∫Øn th∆∞·ªùng - CH·ªà n·∫øu ch∆∞a b·ªã spam check x·ª≠ l√Ω
                    await this.showWelcomeMessage(user)
                }
            }
        } catch (error) {
            console.error('Error handling new user text:', error)
            // Kh√¥ng g·ª≠i welcome message n·∫øu c√≥ l·ªói ƒë·ªÉ tr√°nh spam
        }
    }

    /**
     * Route to appropriate handler
     */
    private static async routeToHandler(user: any, action: string): Promise<void> {
        try {
            switch (action) {
                case 'LISTING':
                    const { MarketplaceFlow } = await import('../flows/marketplace-flow')
                    const marketplaceFlow = new MarketplaceFlow()
                    await marketplaceFlow.handleListing(user)
                    break
                case 'SEARCH':
                    const { MarketplaceFlow: SearchFlow } = await import('../flows/marketplace-flow')
                    const searchFlow = new SearchFlow()
                    await searchFlow.handleSearch(user)
                    break
                case 'PAYMENT':
                    const { PaymentFlow } = await import('../flows/payment-flow')
                    const paymentFlow = new PaymentFlow()
                    await paymentFlow.handlePayment(user)
                    break
                default:
                    await this.showMainMenu(user)
            }
        } catch (error) {
            console.error('Error routing to handler:', error)
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * Hi·ªÉn th·ªã th√¥ng tin bot
     */
    private static async showBotInfo(user: any): Promise<void> {
        try {
            const { sendMessage, sendQuickReply, createQuickReply } = await import('../facebook-api')

            await sendMessage(user.facebook_id, '‚ÑπÔ∏è TH√îNG TIN V·ªÄ BOT T√¢n D·∫≠u - H·ªó Tr·ª£ Ch√©o')
            await sendMessage(user.facebook_id, 'ü§ñ Bot n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát cho c·ªông ƒë·ªìng T√¢n D·∫≠u - H·ªó Tr·ª£ Ch√©o')
            await sendMessage(user.facebook_id, 'üéØ Ch·ª©c nƒÉng ch√≠nh:\n‚Ä¢ Ni√™m y·∫øt s·∫£n ph·∫©m/d·ªãch v·ª•\n‚Ä¢ T√¨m ki·∫øm & k·∫øt n·ªëi mua b√°n\n‚Ä¢ C·ªông ƒë·ªìng T√¢n D·∫≠u - h·ªó tr·ª£ ch√©o\n‚Ä¢ T·ª≠ vi h√†ng ng√†y\n‚Ä¢ ƒêi·ªÉm th∆∞·ªüng & qu√† t·∫∑ng')
            await sendMessage(user.facebook_id, 'üí∞ Ph√≠ s·ª≠ d·ª•ng:\n‚Ä¢ Trial 7 ng√†y mi·ªÖn ph√≠\n‚Ä¢ Ph√≠ duy tr√¨: 2,000ƒë/ng√†y\n‚Ä¢ G√≥i t·ªëi thi·ªÉu: 7 ng√†y = 14,000ƒë')
            await sendMessage(user.facebook_id, 'üîí B·∫£o m·∫≠t:\n‚Ä¢ Ch·ªâ d√†nh cho T√¢n D·∫≠u - H·ªó Tr·ª£ Ch√©o\n‚Ä¢ Th√¥ng tin ƒë∆∞·ª£c m√£ h√≥a b·∫£o m·∫≠t\n‚Ä¢ L∆∞u tr·ªØ ƒë·ªÉ t√¨m ki·∫øm & k·∫øt n·ªëi hi·ªáu qu·∫£')

            await sendQuickReply(
                user.facebook_id,
                'B·∫°n mu·ªën:',
                [
                    createQuickReply('üöÄ ƒêƒÇNG K√ù TH√ÄNH VI√äN', 'REGISTER'),
                    createQuickReply('üí¨ H·ªñ TR·ª¢', 'CONTACT_ADMIN'),
                    createQuickReply('üîô TRANG CH·ª¶', 'MAIN_MENU')
                ]
            )
        } catch (error) {
            console.error('Error showing bot info:', error)
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * Hi·ªÉn th·ªã th√¥ng tin h·ªó tr·ª£
     */
    private static async showSupportInfo(user: any): Promise<void> {
        try {
            const { sendMessage, sendQuickReply, createQuickReply } = await import('../facebook-api')

            await sendMessage(user.facebook_id, 'üí¨ LI√äN H·ªÜ H·ªñ TR·ª¢')
            await sendMessage(user.facebook_id, 'ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£, vui l√≤ng li√™n h·ªá:\nüìû Hotline: 0901 234 567\nüìß Email: admin@tandau1981.com\n‚è∞ Th·ªùi gian: 8:00 - 22:00')
            await sendMessage(user.facebook_id, 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ.')

            await sendQuickReply(
                user.facebook_id,
                'B·∫°n mu·ªën:',
                [
                    createQuickReply('üöÄ ƒêƒÇNG K√ù TH√ÄNH VI√äN', 'REGISTER'),
                    createQuickReply('‚ÑπÔ∏è T√åM HI·ªÇU TH√äM', 'INFO'),
                    createQuickReply('üîô TRANG CH·ª¶', 'MAIN_MENU')
                ]
            )
        } catch (error) {
            console.error('Error showing support info:', error)
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * Hi·ªÉn th·ªã menu ch√≠nh
     */
    private static async showMainMenu(user: any): Promise<void> {
        try {
            const { sendMessage, sendQuickReply, createQuickReply } = await import('../facebook-api')

            await sendMessage(user.facebook_id, 'üè† TRANG CH·ª¶ - Bot T√¢n D·∫≠u - H·ªó Tr·ª£ Ch√©o')
            await sendMessage(user.facebook_id, 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi c·ªông ƒë·ªìng T√¢n D·∫≠u!')

            await sendQuickReply(
                user.facebook_id,
                'Ch·ªçn ch·ª©c nƒÉng:',
                [
                    createQuickReply('üöÄ ƒêƒÇNG K√ù TH√ÄNH VI√äN', 'REGISTER'),
                    createQuickReply('‚ÑπÔ∏è T√åM HI·ªÇU TH√äM', 'INFO'),
                    createQuickReply('üí¨ H·ªñ TR·ª¢', 'CONTACT_ADMIN')
                ]
            )
        } catch (error) {
            console.error('Error showing main menu:', error)
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * B·∫Øt ƒë·∫ßu registration flow
     */
    private static async startRegistration(user: any): Promise<void> {
        try {
            // Ki·ªÉm tra xem user ƒë√£ c√≥ session registration ch∆∞a
            const { getBotSession } = await import('../utils')
            const existingSession = await getBotSession(user.facebook_id)

            if (existingSession && existingSession.session_data?.current_flow === 'registration') {
                // User ƒë√£ trong flow registration, ch·ªâ g·ª≠i l·∫°i h∆∞·ªõng d·∫´n hi·ªán t·∫°i
                console.log('User already in registration flow, resuming current step')
                const { AuthFlow } = await import('../flows/auth-flow')
                const authFlow = new AuthFlow()
                await authFlow.handleRegistration(user)
                return
            }

            const { AuthFlow } = await import('../flows/auth-flow')
            const authFlow = new AuthFlow()
            await authFlow.handleRegistration(user)
        } catch (error) {
            console.error('Error starting registration:', error)
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * X·ª≠ l√Ω flow exit
     */
    private static async handleFlowExit(user: any, currentFlow?: string): Promise<void> {
        try {
            await updateBotSession(user.facebook_id, null)
            const flowName = currentFlow ? this.getFlowDisplayName(currentFlow) : 'hi·ªán t·∫°i'
            await this.sendMessage(user.facebook_id, `‚ùå ƒê√£ h·ªßy quy tr√¨nh ${flowName}`)
            await this.showMainMenu(user)
        } catch (error) {
            console.error('Error handling flow exit:', error)
            await this.sendErrorMessage(user.facebook_id)
        }
    }

    /**
     * Ki·ªÉm tra exit command
     */
    private static isExitCommand(text: string): boolean {
        const exitCommands = ['h·ªßy', 'tho√°t', 'cancel', 'quit', 'exit']
        return exitCommands.some(cmd => text.toLowerCase().includes(cmd))
    }

    /**
     * L·∫•y t√™n hi·ªÉn th·ªã c·ªßa flow
     */
    private static getFlowDisplayName(flow: string): string {
        const flowNames: { [key: string]: string } = {
            'registration': 'ƒëƒÉng k√Ω',
            'listing': 'ni√™m y·∫øt',
            'search': 't√¨m ki·∫øm'
        }
        return flowNames[flow] || flow
    }

    /**
     * Show welcome message cho new user - LOGIC TH√îNG MINH
     */
    private static async showWelcomeMessage(user: any): Promise<void> {
        try {
            // Ki·ªÉm tra tr·∫°ng th√°i welcome
            const { supabaseAdmin } = await import('../supabase')
            const { data: existingUser } = await supabaseAdmin
                .from('users')
                .select('welcome_message_sent, welcome_interaction_count')
                .eq('facebook_id', user.facebook_id)
                .single()

            const interactionCount = existingUser?.welcome_interaction_count || 0

            // L·∫ßn ƒë·∫ßu ti√™n - hi·ªÉn th·ªã welcome ƒë·∫ßy ƒë·ªß + menu
            if (!existingUser?.welcome_message_sent) {
                await sendTypingIndicator(user.facebook_id)

                // Get Facebook name for personalized greeting - with error handling
                let displayName = 'b·∫°n'
                try {
                    const { getFacebookDisplayName } = await import('../utils')
                    const facebookName = await getFacebookDisplayName(user.facebook_id)
                    if (facebookName) {
                        displayName = facebookName
                    }
                } catch (error) {
                    console.warn('Failed to get Facebook display name, using fallback:', error instanceof Error ? error.message : String(error))
                }

                // DISABLED: Welcome message now handled by anti-spam system
                console.log('Welcome message handled by anti-spam system')

                await sendQuickReply(
                    user.facebook_id,
                    'B·∫°n mu·ªën:',
                    [
                        createQuickReply('üöÄ ƒêƒÇNG K√ù TH√ÄNH VI√äN', 'REGISTER'),
                        createQuickReply('‚ÑπÔ∏è T√åM HI·ªÇU TH√äM', 'INFO'),
                        createQuickReply('üí¨ H·ªñ TR·ª¢', 'SUPPORT')
                    ]
                )

                // ƒê√°nh d·∫•u ƒë√£ g·ª≠i welcome v√† tƒÉng interaction count
                await supabaseAdmin
                    .from('users')
                    .upsert({
                        facebook_id: user.facebook_id,
                        welcome_message_sent: true,
                        welcome_interaction_count: 1,
                        created_at: new Date().toISOString(),
                        updated_at: new Date().toISOString()
                    }, {
                        onConflict: 'facebook_id'
                    })
            }
            // L·∫ßn th·ª© 2 tr·ªü ƒëi - ki·ªÉm tra interaction
            else {
                const newCount = interactionCount + 1

                // L·∫ßn 2+: Im l·∫∑ng, ·∫©n menu ho√†n to√†n (user kh√¥ng quan t√¢m)
                // Kh√¥ng g·ª≠i g√¨ c·∫£ - im l·∫∑ng
                // User kh√¥ng quan t√¢m ƒë·∫øn bot

                // TƒÉng interaction count
                await supabaseAdmin
                    .from('users')
                    .update({
                        welcome_interaction_count: newCount,
                        updated_at: new Date().toISOString()
                    })
                    .eq('facebook_id', user.facebook_id)
            }
        } catch (error) {
            console.error('Error showing welcome message:', error)
        }
    }


    /**
     * Show admin dashboard
     */
    private static async showAdminDashboard(user: any): Promise<void> {
        try {
            await sendTypingIndicator(user.facebook_id)
            await sendMessage(user.facebook_id, 'üîß ADMIN DASHBOARD')
            await sendMessage(user.facebook_id, 'Ch√†o m·ª´ng Admin! B·∫°n c√≥ to√†n quy·ªÅn qu·∫£n l√Ω h·ªá th·ªëng.')

            const adminOptions = [
                createQuickReply('üí∞ QU·∫¢N L√ù THANH TO√ÅN', 'ADMIN_PAYMENTS'),
                createQuickReply('üë• QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG', 'ADMIN_USERS'),
                createQuickReply('üõí QU·∫¢N L√ù TIN ƒêƒÇNG', 'ADMIN_LISTINGS'),
                createQuickReply('üìä XEM TH·ªêNG K√ä', 'ADMIN_STATS')
            ]

            await sendQuickReply(user.facebook_id, 'Ch·ªçn ch·ª©c nƒÉng:', adminOptions)
        } catch (error) {
            console.error('Error showing admin dashboard:', error)
        }
    }


    /**
     * Show pending user welcome
     */
    private static async showPendingUserWelcome(user: any, context: any): Promise<void> {
        try {
            const { PendingUserFlow } = await import('../flows/pending-user-flow')
            const pendingUserFlow = new PendingUserFlow()
            await pendingUserFlow.showPendingUserMenu(user, context)
        } catch (error) {
            console.error('Error showing pending user welcome:', error)
            await this.showWelcomeMessage(user)
        }
    }


    /**
     * X·ª≠ l√Ω admin postback
     */
    private static async handleAdminPostback(user: any, postback: string): Promise<void> {
        try {
            const { handleAdminCommand } = await import('../handlers/admin-handlers')
            await handleAdminCommand(user)
        } catch (error) {
            console.error('Error handling admin postback:', error)
            await this.showAdminDashboard(user)
        }
    }

    /**
     * Handle default message - CH·ªà HI·ªÇN TH·ªä MENU, KH√îNG T·∫†O SPAM
     */
    private static async handleDefaultMessage(user: any): Promise<void> {
        try {
            const context = await this.analyzeUserContext(user)

            switch (context.userType) {
                case UserType.ADMIN:
                    await this.showAdminDashboard(user)
                    break
                case UserType.REGISTERED_USER:
                case UserType.TRIAL_USER:
                    await this.showMainMenu(user)
                    break
                case UserType.PENDING_USER:
                    await this.showPendingUserWelcome(user, context)
                    break
                case UserType.EXPIRED_USER:
                    await this.sendMessage(user.facebook_id, '‚è∞ T√†i kho·∫£n ƒë√£ h·∫øt h·∫°n. Vui l√≤ng thanh to√°n ƒë·ªÉ ti·∫øp t·ª•c.')
                    break
                case UserType.NEW_USER:
                default:
                    // NEW USER: Kh√¥ng g·ª≠i welcome message m·∫∑c ƒë·ªãnh
                    // Welcome message ch·ªâ ƒë∆∞·ª£c g·ª≠i qua spam check system
                    console.log('New user default message - kh√¥ng g·ª≠i welcome ƒë·ªÉ tr√°nh spam')
                    break
            }
        } catch (error) {
            console.error('Error handling default message:', error)
            // Kh√¥ng g·ª≠i welcome message khi c√≥ l·ªói ƒë·ªÉ tr√°nh spam
        }
    }

    /**
     * Send message helper
     */
    private static async sendMessage(facebookId: string, message: string): Promise<void> {
        try {
            await sendMessage(facebookId, message)
        } catch (error) {
            console.error('Error sending message:', error)
        }
    }

    /**
     * Send error message
     */
    private static async sendErrorMessage(facebookId: string): Promise<void> {
        try {
            await sendMessage(facebookId, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!')
        } catch (error) {
            console.error('Error sending error message:', error)
        }
    }

    /**
     * Send spam blocked message
     */
    private static async sendSpamBlockedMessage(facebookId: string, reason?: string): Promise<void> {
        try {
            await sendMessage(facebookId, 'üö´ Bot ƒë√£ t·∫°m d·ª´ng do ph√°t hi·ªán spam')
            await sendMessage(facebookId, 'N·∫øu c·∫ßn h·ªó tr·ª£, h√£y li√™n h·ªá admin')

            await sendQuickReply(
                facebookId,
                'Li√™n h·ªá:',
                [
                    createQuickReply('üí¨ CHAT V·ªöI ADMIN', 'CONTACT_ADMIN'),
                    createQuickReply('üîÑ TH·ª¨ L·∫†I SAU', 'MAIN_MENU')
                ]
            )
        } catch (error) {
            console.error('Error sending spam blocked message:', error)
        }
    }


}
