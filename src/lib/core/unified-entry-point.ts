import { sendMessage, sendTypingIndicator, sendQuickReply, createQuickReply } from '../facebook-api'
import { SmartContextManager, UserContext, UserType, UserState } from './smart-context-manager'
import { updateBotSession } from '../utils'

// Unified Entry Point - ƒêi·ªÉm v√†o duy nh·∫•t cho to√†n b·ªô h·ªá th·ªëng
export class UnifiedEntryPoint {

    /**
     * X·ª≠ l√Ω tin nh·∫Øn ƒë·∫ßu ti√™n ho·∫∑c tin nh·∫Øn th∆∞·ªùng
     * ƒê√¢y l√† ƒëi·ªÉm v√†o duy nh·∫•t cho to√†n b·ªô h·ªá th·ªëng
     */
    static async handleInitialMessage(user: any, text?: string): Promise<void> {
        try {
            // B∆∞·ªõc 1: Ph√¢n t√≠ch ng·ªØ c·∫£nh th√¥ng minh
            const context = await SmartContextManager.analyzeUserContext(user)

            // B∆∞·ªõc 2: L·∫•y welcome message ph√π h·ª£p
            const welcomeMessage = SmartContextManager.getContextualWelcomeMessage(context)

            // B∆∞·ªõc 3: L·∫•y menu ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh
            const menuOptions = SmartContextManager.getContextualMenu(context)

            // B∆∞·ªõc 4: G·ª≠i welcome message
            await sendTypingIndicator(user.facebook_id)
            await sendMessage(user.facebook_id, welcomeMessage)

            // B∆∞·ªõc 5: G·ª≠i menu ph√π h·ª£p
            if (menuOptions.length > 0) {
                // S·∫Øp x·∫øp menu theo priority
                const sortedMenu = menuOptions.sort((a, b) => (a.priority || 999) - (b.priority || 999))

                // T·∫°o quick replies t·ª´ menu
                const quickReplies = sortedMenu.map(option => createQuickReply(option.title, option.action))

                // G·ª≠i menu d∆∞·ªõi d·∫°ng quick reply (t·ªëi ƒëa 13 options)
                if (quickReplies.length <= 13) {
                    await sendQuickReply(user.facebook_id, 'Ch·ªçn ch·ª©c nƒÉng:', quickReplies)
                } else {
                    // N·∫øu qu√° nhi·ªÅu options, chia th√†nh 2 nh√≥m
                    const firstGroup = quickReplies.slice(0, 11)
                    const secondGroup = quickReplies.slice(11)

                    await sendQuickReply(user.facebook_id, 'Ch·ªçn ch·ª©c nƒÉng (1/2):', firstGroup)
                    await sendQuickReply(user.facebook_id, 'Ch·ªçn ch·ª©c nƒÉng (2/2):', secondGroup)
                }
            }

            // B∆∞·ªõc 6: Log ng·ªØ c·∫£nh ƒë·ªÉ debug
            console.log('Smart Context Analysis:', {
                facebook_id: user.facebook_id,
                userType: context.userType,
                userState: context.userState,
                isInFlow: context.isInFlow,
                flowType: context.flowType
            })

        } catch (error) {
            console.error('Error in unified entry point:', error)

            // Fallback: g·ª≠i welcome message c∆° b·∫£n
            await sendTypingIndicator(user.facebook_id)
            await sendMessage(user.facebook_id, 'üëã Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot T√¢n D·∫≠u - H·ªó Tr·ª£ Ch√©o!')

            await sendQuickReply(
                user.facebook_id,
                'B·∫°n mu·ªën:',
                [
                    createQuickReply('üöÄ ƒêƒÇNG K√ù', 'REGISTER'),
                    createQuickReply('‚ÑπÔ∏è TH√îNG TIN', 'INFO'),
                    createQuickReply('üí¨ H·ªñ TR·ª¢', 'SUPPORT')
                ]
            )
        }
    }

    /**
     * X·ª≠ l√Ω khi user ch·ªçn t·ª´ menu
     */
    static async handleMenuSelection(user: any, action: string): Promise<boolean> {
        try {
            const context = await SmartContextManager.analyzeUserContext(user)

            // Route ƒë·∫øn handler ph√π h·ª£p d·ª±a tr√™n action v√† context
            return await this.routeToHandler(user, action, context)

        } catch (error) {
            console.error('Error handling menu selection:', error)
            await sendMessage(user.facebook_id, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!')
            return false
        }
    }

    /**
     * Route to appropriate handler based on action and context
     */
    private static async routeToHandler(user: any, action: string, context: UserContext): Promise<boolean> {
        const { userType, userState } = context

        // Handle flow-specific actions first
        if (this.isFlowAction(action)) {
            return await this.handleFlowAction(user, action, context)
        }

        // Handle admin actions
        if (userType === UserType.ADMIN && this.isAdminAction(action)) {
            return await this.handleAdminAction(user, action)
        }

        // Handle user actions based on user type
        switch (userType) {
            case UserType.ADMIN:
                return await this.handleAdminAction(user, action)

            case UserType.REGISTERED_USER:
            case UserType.TRIAL_USER:
                return await this.handleRegisteredUserAction(user, action, context)

            case UserType.EXPIRED_USER:
                return await this.handleExpiredUserAction(user, action)

            case UserType.NEW_USER:
            default:
                return await this.handleNewUserAction(user, action)
        }
    }

    /**
     * Ki·ªÉm tra xem action c√≥ ph·∫£i l√† flow action kh√¥ng
     */
    private static isFlowAction(action: string): boolean {
        const flowActions = [
            'CONTINUE_REGISTRATION', 'CANCEL_REGISTRATION',
            'CONTINUE_LISTING', 'CANCEL_LISTING',
            'CONTINUE_SEARCH', 'CANCEL_SEARCH',
            'CONTINUE_PAYMENT', 'CANCEL_PAYMENT'
        ]
        return flowActions.includes(action)
    }

    /**
     * Ki·ªÉm tra xem action c√≥ ph·∫£i l√† admin action kh√¥ng
     */
    private static isAdminAction(action: string): boolean {
        return action.startsWith('ADMIN_')
    }

    /**
     * X·ª≠ l√Ω flow actions
     */
    private static async handleFlowAction(user: any, action: string, context: UserContext): Promise<boolean> {
        const { userState, flowType } = context

        switch (action) {
            case 'CONTINUE_REGISTRATION':
                if (userState === UserState.IN_REGISTRATION) {
                    // Ti·∫øp t·ª•c registration flow
                    const { AuthFlow } = await import('../flows/auth-flow')
                    const authFlow = new AuthFlow()
                    await authFlow.handleRegistration(user)
                    return true
                }
                break

            case 'CANCEL_REGISTRATION':
                if (userState === UserState.IN_REGISTRATION) {
                    await updateBotSession(user.facebook_id, null)
                    await sendMessage(user.facebook_id, '‚ùå ƒê√£ h·ªßy ƒëƒÉng k√Ω. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu l·∫°i b·∫•t c·ª© l√∫c n√†o!')
                    await this.handleInitialMessage(user)
                    return true
                }
                break

            case 'CONTINUE_LISTING':
                if (userState === UserState.IN_LISTING) {
                    // Ti·∫øp t·ª•c listing flow - s·ª≠ d·ª•ng handler t·ª´ marketplace-handlers
                    const { handleListing } = await import('../handlers/marketplace-handlers')
                    await handleListing(user)
                    return true
                }
                break

            case 'CANCEL_LISTING':
                if (userState === UserState.IN_LISTING) {
                    await updateBotSession(user.facebook_id, null)
                    await sendMessage(user.facebook_id, '‚ùå ƒê√£ h·ªßy ni√™m y·∫øt. B·∫°n c√≥ th·ªÉ t·∫°o tin m·ªõi b·∫•t c·ª© l√∫c n√†o!')
                    await this.handleInitialMessage(user)
                    return true
                }
                break

            case 'CONTINUE_SEARCH':
                if (userState === UserState.IN_SEARCH) {
                    // Ti·∫øp t·ª•c search flow - s·ª≠ d·ª•ng handler t·ª´ marketplace-handlers
                    const { handleSearch } = await import('../handlers/marketplace-handlers')
                    await handleSearch(user)
                    return true
                }
                break

            case 'CANCEL_SEARCH':
                if (userState === UserState.IN_SEARCH) {
                    await updateBotSession(user.facebook_id, null)
                    await sendMessage(user.facebook_id, '‚ùå ƒê√£ h·ªßy t√¨m ki·∫øm. B·∫°n c√≥ th·ªÉ t√¨m ki·∫øm l·∫°i b·∫•t c·ª© l√∫c n√†o!')
                    await this.handleInitialMessage(user)
                    return true
                }
                break
        }

        return false
    }

    /**
     * X·ª≠ l√Ω admin actions
     */
    private static async handleAdminAction(user: any, action: string): Promise<boolean> {
        try {
            const { handleAdminCommand, handleAdminPayments, handleAdminUsers } = await import('../handlers/admin-handlers')

            switch (action) {
                case 'ADMIN_PAYMENTS':
                    await handleAdminPayments(user)
                    return true
                case 'ADMIN_USERS':
                    await handleAdminUsers(user)
                    return true
                case 'ADMIN_LISTINGS':
                    const { handleAdminListings } = await import('../handlers/admin-handlers')
                    await handleAdminListings(user)
                    return true
                case 'ADMIN_STATS':
                    const { handleAdminStats } = await import('../handlers/admin-handlers')
                    await handleAdminStats(user)
                    return true
                case 'ADMIN_NOTIFICATIONS':
                    const { handleAdminNotifications } = await import('../handlers/admin-handlers')
                    await handleAdminNotifications(user)
                    return true
                case 'ADMIN_SETTINGS':
                    const { handleAdminSettings } = await import('../handlers/admin-handlers')
                    await handleAdminSettings(user)
                    return true
                default:
                    await handleAdminCommand(user)
                    return true
            }
        } catch (error) {
            console.error('Error handling admin action:', error)
            return false
        }
    }

    /**
     * X·ª≠ l√Ω registered user actions
     */
    private static async handleRegisteredUserAction(user: any, action: string, context: UserContext): Promise<boolean> {
        try {
            switch (action) {
                case 'MAIN_MENU':
                    await this.showMainMenu(user, context)
                    return true

                case 'LISTING':
                    const { handleListing } = await import('../handlers/marketplace-handlers')
                    await handleListing(user)
                    return true

                case 'SEARCH':
                    const { handleSearch } = await import('../handlers/marketplace-handlers')
                    await handleSearch(user)
                    return true

                case 'COMMUNITY':
                    const { handleCommunity } = await import('../handlers/community-handlers')
                    await handleCommunity(user)
                    return true

                case 'PAYMENT':
                case 'PAYMENT_URGENT':
                    const { handlePayment } = await import('../handlers/payment-handlers')
                    await handlePayment(user)
                    return true

                case 'POINTS':
                    const { handlePoints } = await import('../handlers/utility-handlers')
                    await handlePoints(user)
                    return true

                case 'SETTINGS':
                    const { handleSettings } = await import('../handlers/utility-handlers')
                    await handleSettings(user)
                    return true

                default:
                    await this.showMainMenu(user, context)
                    return true
            }
        } catch (error) {
            console.error('Error handling registered user action:', error)
            return false
        }
    }

    /**
     * X·ª≠ l√Ω expired user actions
     */
    private static async handleExpiredUserAction(user: any, action: string): Promise<boolean> {
        try {
            switch (action) {
                case 'PAYMENT':
                    const { handlePayment } = await import('../handlers/payment-handlers')
                    await handlePayment(user)
                    return true

                case 'REGISTER':
                    const { AuthFlow } = await import('../flows/auth-flow')
                    const authFlow = new AuthFlow()
                    await authFlow.handleRegistration(user)
                    return true

                case 'INFO':
                    await sendMessage(user.facebook_id, '‚ÑπÔ∏è ƒê·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng bot, vui l√≤ng thanh to√°n ƒë·ªÉ gia h·∫°n t√†i kho·∫£n.')
                    await this.handleInitialMessage(user)
                    return true

                default:
                    await this.handleInitialMessage(user)
                    return true
            }
        } catch (error) {
            console.error('Error handling expired user action:', error)
            return false
        }
    }

    /**
     * X·ª≠ l√Ω new user actions
     */
    private static async handleNewUserAction(user: any, action: string): Promise<boolean> {
        try {
            switch (action) {
                case 'REGISTER':
                    // S·ª≠ d·ª•ng AuthFlow instance tr·ª±c ti·∫øp
                    const { AuthFlow } = await import('../flows/auth-flow')
                    const authFlowInstance = new AuthFlow()
                    await authFlowInstance.handleRegistration(user)
                    return true

                case 'INFO':
                    await sendMessage(user.facebook_id, '‚ÑπÔ∏è Bot T√¢n D·∫≠u - H·ªó Tr·ª£ Ch√©o d√†nh ri√™ng cho c·ªông ƒë·ªìng nh·ªØng ng∆∞·ªùi con T√¢n D·∫≠u (sinh nƒÉm 1981).')
                    await sendMessage(user.facebook_id, 'üí° ƒê·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng, b·∫°n c·∫ßn ƒëƒÉng k√Ω th√†nh vi√™n.')
                    await this.handleInitialMessage(user)
                    return true

                case 'SUPPORT':
                    await sendMessage(user.facebook_id, 'üí¨ ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£, vui l√≤ng li√™n h·ªá admin ho·∫∑c ƒëƒÉng k√Ω th√†nh vi√™n ƒë·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng.')
                    await this.handleInitialMessage(user)
                    return true

                default:
                    await this.handleInitialMessage(user)
                    return true
            }
        } catch (error) {
            console.error('Error handling new user action:', error)
            return false
        }
    }

    /**
     * Hi·ªÉn th·ªã main menu cho registered user
     */
    private static async showMainMenu(user: any, context: UserContext): Promise<void> {
        await sendTypingIndicator(user.facebook_id)

        const displayName = context.user?.name || 'b·∫°n'
        const statusText = context.userType === UserType.TRIAL_USER ?
            `üìÖ Trial c√≤n ${Math.ceil((new Date(context.user.membership_expires_at).getTime() - Date.now()) / (1000 * 60 * 60 * 24))} ng√†y` :
            '‚úÖ ƒê√£ thanh to√°n'

        await sendMessage(user.facebook_id, 'üè† TRANG CH·ª¶ T√¢n D·∫≠u - H·ªó Tr·ª£ Ch√©o')
        await sendMessage(user.facebook_id, `üëã Ch√†o m·ª´ng ${displayName}!`)
        await sendMessage(user.facebook_id, `üìä Tr·∫°ng th√°i: ${statusText}`)
        await sendMessage(user.facebook_id, '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')
        await sendMessage(user.facebook_id, 'üéØ Ch·ªçn ch·ª©c nƒÉng b·∫°n mu·ªën s·ª≠ d·ª•ng:')

        const mainMenuOptions = [
            createQuickReply('üõí NI√äM Y·∫æT S·∫¢N PH·∫®M', 'LISTING'),
            createQuickReply('üîç T√åM KI·∫æM', 'SEARCH'),
            createQuickReply('üë• C·ªòNG ƒê·ªíNG', 'COMMUNITY'),
            createQuickReply('üí∞ THANH TO√ÅN', 'PAYMENT'),
            createQuickReply('‚≠ê ƒêI·ªÇM TH∆Ø·ªûNG', 'POINTS'),
            createQuickReply('‚öôÔ∏è C√ÄI ƒê·∫∂T', 'SETTINGS')
        ]

        await sendQuickReply(user.facebook_id, 'Ch·ª©c nƒÉng ch√≠nh:', mainMenuOptions)
    }
}
