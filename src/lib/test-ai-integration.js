// Test AI Integration - Ki·ªÉm tra nhanh AI system ho·∫°t ƒë·ªông
// Ch·∫°y script n√†y ƒë·ªÉ test nhanh c√°c ch·ª©c nƒÉng AI

import { aiManager } from './core/ai-manager'
import { aiFallbackManager } from './ai/core/ai-fallback'
import { aiServiceFactory } from './ai/core/ai-service'

class AITester {
    constructor() {
        this.results = {
            passed: 0,
            failed: 0,
            tests: []
        }
    }

    async runAllTests() {
        console.log('ü§ñ B·∫Øt ƒë·∫ßu test AI Integration...\n')

        await this.testAIManager()
        await this.testFallbackSystem()
        await this.testServiceFactory()
        await this.testConfiguration()
        await this.testMemoryUsage()

        this.printResults()
        return this.results.failed === 0
    }

    async testAIManager() {
        console.log('üîç Test 1: AI Manager Initialization...')

        try {
            const manager = aiManager
            const isAvailable = manager.isAvailable()
            const provider = manager.getProvider()
            const config = manager.getConfig()

            this.logTest('AI Manager Instance', manager !== null)
            this.logTest('AI Manager Config', config !== null)
            this.logTest('Provider Detection', provider !== null || true) // C√≥ th·ªÉ null n·∫øu ch∆∞a b·∫≠t AI

            console.log(`   ‚úÖ AI Manager ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng`)
            console.log(`   üìä Provider hi·ªán t·∫°i: ${provider || 'Ch∆∞a b·∫≠t AI'}`)
            console.log(`   üîß Config loaded: ${config ? 'C√≥' : 'Kh√¥ng'}`)

        } catch (error) {
            this.logTest('AI Manager Error', false, error.message)
        }
    }

    async testFallbackSystem() {
        console.log('\nüîç Test 2: Fallback System...')

        try {
            // Test fallback chat
            const chatResponse = await aiFallbackManager.fallbackChat('xin ch√†o')
            this.logTest('Fallback Chat', chatResponse && chatResponse.length > 0)

            // Test fallback search
            const searchResponse = await aiFallbackManager.fallbackSmartSearch('t√¨m nh√†')
            this.logTest('Fallback Search', Array.isArray(searchResponse) && searchResponse.length > 0)

            // Test fallback content
            const contentResponse = await aiFallbackManager.fallbackContentGeneration({
                type: 'product_description',
                context: { title: 'Test Product' }
            })
            this.logTest('Fallback Content', contentResponse && contentResponse.length > 0)

            console.log(`   ‚úÖ Fallback system ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng`)

        } catch (error) {
            this.logTest('Fallback System Error', false, error.message)
        }
    }

    async testServiceFactory() {
        console.log('\nüîç Test 3: Service Factory...')

        try {
            const factory = aiServiceFactory
            const allServices = factory.getAllServices()
            const availableServices = factory.getAvailableServices()

            this.logTest('Service Factory Instance', factory !== null)
            this.logTest('Services Array', Array.isArray(allServices))

            console.log(`   ‚úÖ Service Factory ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng`)
            console.log(`   üìä T·ªïng services: ${allServices.length}`)
            console.log(`   ‚úÖ Available services: ${availableServices.length}`)

        } catch (error) {
            this.logTest('Service Factory Error', false, error.message)
        }
    }

    async testConfiguration() {
        console.log('\nüîç Test 4: Configuration...')

        try {
            // Test import AI config
            const { AI_CONFIG } = await import('./ai-config.js')

            this.logTest('AI Config Import', AI_CONFIG !== null)
            this.logTest('OpenAI Config', AI_CONFIG.OPENAI !== null)
            this.logTest('Google AI Config', AI_CONFIG.GOOGLE_AI !== null)
            this.logTest('Claude Config', AI_CONFIG.CLAUDE !== null)

            console.log(`   ‚úÖ Configuration loaded th√†nh c√¥ng`)
            console.log(`   üìä OpenAI: ${AI_CONFIG.OPENAI.ENABLED ? 'B·∫≠t' : 'T·∫Øt'}`)
            console.log(`   üìä Google AI: ${AI_CONFIG.GOOGLE_AI.ENABLED ? 'B·∫≠t' : 'T·∫Øt'}`)
            console.log(`   üìä Claude: ${AI_CONFIG.CLAUDE.ENABLED ? 'B·∫≠t' : 'T·∫Øt'}`)

        } catch (error) {
            this.logTest('Configuration Error', false, error.message)
        }
    }

    async testMemoryUsage() {
        console.log('\nüîç Test 5: Memory Usage...')

        try {
            const initialMemory = process.memoryUsage()

            // Import v√† s·ª≠ d·ª•ng AI modules
            const { aiManager } = await import('./core/ai-manager.js')
            const { aiFallbackManager } = await import('./ai/core/ai-fallback.js')

            // ƒê·ª£i m·ªôt ch√∫t
            await new Promise(resolve => setTimeout(resolve, 100))

            const afterMemory = process.memoryUsage()
            const memoryIncrease = afterMemory.heapUsed - initialMemory.heapUsed

            const memoryTest = memoryIncrease < 50 * 1024 * 1024 // < 50MB
            this.logTest('Memory Usage', memoryTest)

            console.log(`   ‚úÖ Memory test ho√†n th√†nh`)
            console.log(`   üìä Memory tƒÉng: ${Math.round(memoryIncrease / 1024 / 1024)}MB`)

            if (memoryIncrease > 50 * 1024 * 1024) {
                console.log(`   ‚ö†Ô∏è C·∫£nh b√°o: Memory tƒÉng kh√° nhi·ªÅu`)
            }

        } catch (error) {
            this.logTest('Memory Test Error', false, error.message)
        }
    }

    logTest(testName, passed, error = null) {
        if (passed) {
            this.results.passed++
            this.results.tests.push(`‚úÖ ${testName}`)
            console.log(`   ‚úÖ ${testName}`)
        } else {
            this.results.failed++
            this.results.tests.push(`‚ùå ${testName}: ${error || 'Failed'}`)
            console.log(`   ‚ùå ${testName}: ${error || 'Failed'}`)
        }
    }

    printResults() {
        console.log('\n' + '='.repeat(50))
        console.log('üìä K·∫æT QU·∫¢ TEST AI INTEGRATION')
        console.log('='.repeat(50))

        console.log(`\n‚úÖ Passed: ${this.results.passed}`)
        console.log(`‚ùå Failed: ${this.results.failed}`)
        console.log(`üìä Total: ${this.results.passed + this.results.failed}`)

        if (this.results.failed === 0) {
            console.log('\nüéâ T·∫§T C·∫¢ TESTS ƒê·ªÄU TH√ÄNH C√îNG!')
            console.log('‚úÖ AI Integration s·∫µn s√†ng ƒë·ªÉ tri·ªÉn khai')
            console.log('üöÄ C√≥ th·ªÉ ti·∫øn h√†nh Phase 2: AI Smart Search')
        } else {
            console.log('\n‚ö†Ô∏è C√ì M·ªòT S·ªê TESTS TH·∫§T B·∫†I!')
            console.log('üîß C·∫ßn kh·∫Øc ph·ª•c tr∆∞·ªõc khi tri·ªÉn khai')
        }

        console.log('\nüìã Chi ti·∫øt c√°c tests:')
        this.results.tests.forEach(test => console.log(`   ${test}`))

        console.log('\nüí° Khuy·∫øn ngh·ªã ti·∫øp theo:')
        if (this.results.failed === 0) {
            console.log('   ‚Üí B·∫≠t AI provider trong .env')
            console.log('   ‚Üí Test v·ªõi user th·∫≠t')
            console.log('   ‚Üí Tri·ªÉn khai AI Smart Search')
        } else {
            console.log('   ‚Üí Ki·ªÉm tra l·ªói c·ª• th·ªÉ')
            console.log('   ‚Üí Fix v√† ch·∫°y l·∫°i test')
            console.log('   ‚Üí ƒê·∫£m b·∫£o t·∫•t c·∫£ tests pass')
        }

        console.log('='.repeat(50))
    }
}

// Ch·∫°y test n·∫øu file ƒë∆∞·ª£c execute tr·ª±c ti·∫øp
async function runAITests() {
    const tester = new AITester()
    const success = await tester.runAllTests()

    // Exit code ƒë·ªÉ CI/CD c√≥ th·ªÉ s·ª≠ d·ª•ng
    process.exit(success ? 0 : 1)
}

// Xu·∫•t ƒë·ªÉ s·ª≠ d·ª•ng trong code kh√°c
export { AITester, runAITests }

// Ch·∫°y n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
    runAITests().catch(console.error)
}
