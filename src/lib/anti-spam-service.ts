/**
 * Simplified Anti-Spam Service
 * CH·ªà GI·ªÆ L·∫†I LOGIC ADMIN TAKEOVER
 * Lo·∫°i b·ªè logic spam ph·ª©c t·∫°p - ch·ªâ ki·ªÉm tra admin takeover
 */

import { logger } from './logger'
import { AdminTakeoverService } from './admin-takeover-service'

export interface SpamCheckResult {
    blocked: boolean
    reason?: string
    action?: string
    message?: string
    warningLevel?: number
}

/**
 * ƒê∆†N GI·∫¢N H√ìA: Anti-spam service CH·ªà KI·ªÇM TRA ADMIN TAKEOVER
 */
export class AntiSpamService {
    /**
     * LOGIC ƒê∆†N GI·∫¢N: Ch·ªâ ki·ªÉm tra admin takeover
     */
    static async checkMessage(user: any, text: string): Promise<SpamCheckResult> {
        try {
            const facebookId = user.facebook_id

            // CH·ªà KI·ªÇM TRA ADMIN TAKEOVER - kh√¥ng c√≥ logic spam ph·ª©c t·∫°p
            const isAdminActive = await AdminTakeoverService.isAdminActive(facebookId)

            if (isAdminActive) {
                // Admin ƒëang chat - block bot message
                return {
                    blocked: true,
                    reason: 'admin_active',
                    message: 'üë®‚Äçüíº Admin ƒëang chat v·ªõi b·∫°n. Bot s·∫Ω t·∫°m d·ª´ng.'
                }
            }

            // Kh√¥ng c√≥ spam - cho ph√©p t·∫•t c·∫£ tin nh·∫Øn
            return { blocked: false }

        } catch (error) {
            logger.error('Error in AntiSpamService.checkMessage', {
                facebookId: user.facebook_id,
                error: error instanceof Error ? error.message : String(error)
            })

            // L·ªói th√¨ cho ph√©p x·ª≠ l√Ω tin nh·∫Øn ƒë·ªÉ kh√¥ng block user
            return { blocked: false }
        }
    }

    /**
     * Ki·ªÉm tra spam cho postback actions (nh∆∞ CONTACT_ADMIN)
     */
    static async checkPostbackAction(user: any, action: string): Promise<SpamCheckResult> {
        try {
            // Postback actions kh√¥ng b·ªã gi·ªõi h·∫°n spam
            return { blocked: false }

        } catch (error) {
            logger.error('Error in AntiSpamService.checkPostbackAction', {
                facebookId: user.facebook_id,
                action,
                error: error instanceof Error ? error.message : String(error)
            })

            return { blocked: false }
        }
    }

    /**
     * Reset user state khi admin chat xong
     */
    static resetUserCache(facebookId: string): void {
        logger.info('Anti-spam cache reset for user', { facebookId })
    }

    /**
     * Get cache statistics
     */
    static getCacheStats(): { size: number, hitRate: number } {
        return {
            size: 0,
            hitRate: 0
        }
    }
}
