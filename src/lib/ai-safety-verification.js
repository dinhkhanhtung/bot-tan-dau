// AI Safety Verification Script - Ki·ªÉm tra an to√†n tr∆∞·ªõc khi tri·ªÉn khai
// Ch·∫°y script n√†y ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ xung ƒë·ªôt khi t√≠ch h·ª£p AI

class AISafetyVerifier {
    constructor() {
        this.errors = []
        this.warnings = []
        this.success = []
    }

    async runAllTests() {
        console.log('üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra an to√†n AI Integration...\n')

        await this.testImportSafety()
        await this.testMemoryUsage()
        await this.testPerformanceImpact()
        await this.testFallbackEffectiveness()
        await this.testBackwardCompatibility()
        await this.testEnvironmentVariables()
        await this.testDatabaseSchema()

        this.printResults()
        return this.errors.length === 0
    }

    // Test 1: Import Safety - ƒê·∫£m b·∫£o kh√¥ng c√≥ xung ƒë·ªôt import
    async testImportSafety() {
        console.log('üîç Ki·ªÉm tra Import Safety...')

        try {
            // Test import c√°c module AI m·ªõi
            const { aiServiceFactory } = await import('./ai/core/ai-service.js')
            const { aiFallbackManager } = await import('./ai/core/ai-fallback.js')
            const { AIManager } = await import('./core/ai-manager.js')

            this.success.push('‚úÖ Import Safety: T·∫•t c·∫£ AI modules import th√†nh c√¥ng')

            // Test kh√¥ng c√≥ xung ƒë·ªôt v·ªõi modules hi·ªán t·∫°i
            const fs = await import('fs')
            const path = await import('path')

            // Ki·ªÉm tra file hi·ªán t·∫°i kh√¥ng b·ªã overwrite
            const aiManagerPath = './core/ai-manager.js'
            if (fs.existsSync(aiManagerPath)) {
                this.success.push('‚úÖ Import Safety: AI Manager hi·ªán t·∫°i ƒë∆∞·ª£c b·∫£o to√†n')
            }

        } catch (error) {
            this.errors.push(`‚ùå Import Safety: ${error.message}`)
        }
    }

    // Test 2: Memory Usage - Monitor memory consumption
    async testMemoryUsage() {
        console.log('üîç Ki·ªÉm tra Memory Usage...')

        try {
            const initialMemory = process.memoryUsage()

            // Import AI modules v√† t·∫°o instances
            const { aiServiceFactory } = await import('./ai/core/ai-service.js')
            const { aiFallbackManager } = await import('./ai/core/ai-fallback.js')

            // ƒê·ª£i garbage collection
            await new Promise(resolve => setTimeout(resolve, 100))

            const afterMemory = process.memoryUsage()
            const memoryIncrease = afterMemory.heapUsed - initialMemory.heapUsed

            if (memoryIncrease < 50 * 1024 * 1024) { // < 50MB
                this.success.push(`‚úÖ Memory Usage: TƒÉng ${Math.round(memoryIncrease / 1024 / 1024)}MB - trong gi·ªõi h·∫°n cho ph√©p`)
            } else {
                this.warnings.push(`‚ö†Ô∏è Memory Usage: TƒÉng ${Math.round(memoryIncrease / 1024 / 1024)}MB - c·∫ßn monitor ti·∫øp`)
            }

        } catch (error) {
            this.errors.push(`‚ùå Memory Usage: ${error.message}`)
        }
    }

    // Test 3: Performance Impact - ƒêo th·ªùi gian response
    async testPerformanceImpact() {
        console.log('üîç Ki·ªÉm tra Performance Impact...')

        try {
            const iterations = 100
            const times = []

            // ƒêo th·ªùi gian import AI modules
            for (let i = 0; i < iterations; i++) {
                const start = performance.now()
                await import('./ai/core/ai-service.js')
                const end = performance.now()
                times.push(end - start)
            }

            const avgTime = times.reduce((a, b) => a + b) / times.length
            const maxTime = Math.max(...times)

            if (avgTime < 50 && maxTime < 100) { // < 50ms average, < 100ms max
                this.success.push(`‚úÖ Performance: Import trung b√¨nh ${avgTime.toFixed(2)}ms, max ${maxTime.toFixed(2)}ms`)
            } else {
                this.warnings.push(`‚ö†Ô∏è Performance: Import trung b√¨nh ${avgTime.toFixed(2)}ms, max ${maxTime.toFixed(2)}ms`)
            }

        } catch (error) {
            this.errors.push(`‚ùå Performance: ${error.message}`)
        }
    }

    // Test 4: Fallback Effectiveness - Test khi t·∫Øt AI
    async testFallbackEffectiveness() {
        console.log('üîç Ki·ªÉm tra Fallback Effectiveness...')

        try {
            const { aiFallbackManager } = await import('./ai/core/ai-fallback.js')

            // Test fallback chat
            const chatResult = await aiFallbackManager.fallbackChat('xin ch√†o')
            if (chatResult && chatResult.length > 0) {
                this.success.push('‚úÖ Fallback Chat: Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng')
            }

            // Test fallback search
            const searchResult = await aiFallbackManager.fallbackSmartSearch('t√¨m nh√†')
            if (Array.isArray(searchResult) && searchResult.length > 0) {
                this.success.push('‚úÖ Fallback Search: Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng')
            }

            // Test fallback content generation
            const contentResult = await aiFallbackManager.fallbackContentGeneration({
                type: 'product_description',
                context: { title: 'Test Product' }
            })
            if (contentResult && contentResult.length > 0) {
                this.success.push('‚úÖ Fallback Content: Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng')
            }

        } catch (error) {
            this.errors.push(`‚ùå Fallback: ${error.message}`)
        }
    }

    // Test 5: Backward Compatibility - ƒê·∫£m b·∫£o code c≈© v·∫´n ch·∫°y
    async testBackwardCompatibility() {
        console.log('üîç Ki·ªÉm tra Backward Compatibility...')

        try {
            // Test AI Manager c≈© v·∫´n ho·∫°t ƒë·ªông
            const { AIManager, generateHoroscope } = await import('./core/ai-manager.js')

            const aiManager = AIManager.getInstance()
            if (aiManager) {
                this.success.push('‚úÖ Backward Compatibility: AI Manager c≈© ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng')
            }

            // Test function c≈© v·∫´n ch·∫°y ƒë∆∞·ª£c
            const horoscope = generateHoroscope()
            if (horoscope && horoscope.fortune) {
                this.success.push('‚úÖ Backward Compatibility: generateHoroscope() ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng')
            }

        } catch (error) {
            this.errors.push(`‚ùå Backward Compatibility: ${error.message}`)
        }
    }

    // Test 6: Environment Variables - Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt
    async testEnvironmentVariables() {
        console.log('üîç Ki·ªÉm tra Environment Variables...')

        const required = [
            'OPENAI_ENABLED',
            'GOOGLE_AI_ENABLED',
            'CLAUDE_ENABLED'
        ]

        const optional = [
            'OPENAI_API_KEY',
            'GOOGLE_AI_API_KEY',
            'CLAUDE_API_KEY',
            'AI_SMART_SEARCH',
            'AI_CONTENT_GENERATION',
            'AI_CHAT_ASSISTANT'
        ]

        let allPresent = true

        // Check required (c√≥ th·ªÉ false nh∆∞ng ph·∫£i ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a)
        required.forEach(env => {
            if (process.env[env] !== undefined) {
                this.success.push(`‚úÖ ENV Required: ${env} ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a`)
            } else {
                this.warnings.push(`‚ö†Ô∏è ENV Required: ${env} ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a`)
                allPresent = false
            }
        })

        // Check optional (t·ªët n·∫øu c√≥)
        optional.forEach(env => {
            if (process.env[env]) {
                this.success.push(`‚úÖ ENV Optional: ${env} c√≥ gi√° tr·ªã`)
            }
        })

        if (allPresent) {
            this.success.push('‚úÖ ENV: C√≥ th·ªÉ b·∫≠t AI an to√†n')
        }
    }

    // Test 7: Database Schema - Ki·ªÉm tra schema hi·ªán t·∫°i
    async testDatabaseSchema() {
        console.log('üîç Ki·ªÉm tra Database Schema...')

        try {
            // ƒê·ªçc file database schema hi·ªán t·∫°i
            const fs = await import('fs')
            const path = await import('path')

            const schemaPath = './database-complete.sql'
            if (fs.existsSync(schemaPath)) {
                const schema = fs.readFileSync(schemaPath, 'utf8')

                // Ki·ªÉm tra c√°c b·∫£ng c·∫ßn thi·∫øt cho AI ƒë√£ c√≥ ch∆∞a
                const requiredTables = [
                    'users',
                    'listings',
                    'conversations',
                    'messages'
                ]

                requiredTables.forEach(table => {
                    if (schema.includes(`CREATE TABLE ${table}`) || schema.includes(`CREATE TABLE IF NOT EXISTS ${table}`)) {
                        this.success.push(`‚úÖ DB Schema: B·∫£ng ${table} ƒë√£ t·ªìn t·∫°i`)
                    } else {
                        this.warnings.push(`‚ö†Ô∏è DB Schema: B·∫£ng ${table} c√≥ th·ªÉ c·∫ßn t·∫°o`)
                    }
                })

                // Ki·ªÉm tra kh√¥ng c√≥ b·∫£ng AI n√†o b·ªã conflict
                if (!schema.includes('ai_requests') && !schema.includes('ai_responses')) {
                    this.success.push('‚úÖ DB Schema: Kh√¥ng c√≥ xung ƒë·ªôt v·ªõi b·∫£ng AI m·ªõi')
                }

            } else {
                this.warnings.push('‚ö†Ô∏è DB Schema: Kh√¥ng t√¨m th·∫•y file database-complete.sql')
            }

        } catch (error) {
            this.errors.push(`‚ùå DB Schema: ${error.message}`)
        }
    }

    printResults() {
        console.log('\n' + '='.repeat(60))
        console.log('üìä K·∫æT QU·∫¢ KI·ªÇM TRA AN TO√ÄN')
        console.log('='.repeat(60))

        if (this.success.length > 0) {
            console.log('\n‚úÖ TH√ÄNH C√îNG:')
            this.success.forEach(msg => console.log(`   ${msg}`))
        }

        if (this.warnings.length > 0) {
            console.log('\n‚ö†Ô∏è C·∫¢NH B√ÅO:')
            this.warnings.forEach(msg => console.log(`   ${msg}`))
        }

        if (this.errors.length > 0) {
            console.log('\n‚ùå L·ªñI:')
            this.errors.forEach(msg => console.log(`   ${msg}`))
        }

        console.log('\n' + '='.repeat(60))

        if (this.errors.length === 0) {
            console.log('üéâ AN TO√ÄN ƒê·ªÇ TRI·ªÇN KHAI AI!')
            console.log('‚úÖ Kh√¥ng c√≥ l·ªói nghi√™m tr·ªçng')
            console.log('‚úÖ C√≥ th·ªÉ ti·∫øn h√†nh Phase 2')
        } else {
            console.log('‚ö†Ô∏è C·∫¶N KH·∫ÆC PH·ª§C L·ªñI TR∆Ø·ªöC KHI TRI·ªÇN KHAI!')
        }

        console.log('='.repeat(60))
    }
}

// Xu·∫•t k·∫øt qu·∫£ ƒë·ªÉ s·ª≠ d·ª•ng trong code kh√°c
async function runAISafetyVerification() {
    const verifier = new AISafetyVerifier()
    const isSafe = await verifier.runAllTests()
    return {
        isSafe,
        errors: verifier.errors,
        warnings: verifier.warnings,
        success: verifier.success
    }
}

// Ch·∫°y n·∫øu file ƒë∆∞·ª£c execute tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
    runAISafetyVerification().then(result => {
        process.exit(result.isSafe ? 0 : 1)
    })
}

export { AISafetyVerifier, runAISafetyVerification }
