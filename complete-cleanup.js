/**
 * Script cleanup to√†n di·ªán ƒë·ªÉ test l·∫°i t·ª´ ƒë·∫ßu
 * X√≥a s·∫°ch t·∫•t c·∫£ d·ªØ li·ªáu v√† reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
 */

require('dotenv').config()
const { createClient } = require('@supabase/supabase-js')

// C·∫•u h√¨nh Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Thi·∫øu c·∫•u h√¨nh Supabase!')
    console.error('C·∫ßn c√≥ NEXT_PUBLIC_SUPABASE_URL/SUPABASE_URL v√† SUPABASE_SERVICE_ROLE_KEY')
    process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function completeCleanup() {
    console.log('üßπ Starting complete database cleanup...')
    console.log('‚ö†Ô∏è This will delete ALL data and reset to initial state!')
    console.log('')

    try {
        // 1. Clear t·∫•t c·∫£ bot sessions
        console.log('1Ô∏è‚É£ Clearing bot sessions...')
        const { error: sessionError } = await supabase
            .from('bot_sessions')
            .delete()
            .not('id', 'is', null)

        if (sessionError) {
            console.error('‚ùå Error clearing bot sessions:', sessionError.message)
        } else {
            console.log('‚úÖ Bot sessions cleared successfully')
        }

        // 2. Reset user interaction states v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
        console.log('2Ô∏è‚É£ Resetting user interaction states...')
        const { error: userStateError } = await supabase
            .from('user_interaction_states')
            .update({
                bot_active: false,
                welcome_sent: false,
                current_flow: null,
                current_step: 0,
                flow_data: null,
                last_activity: new Date().toISOString(),
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            })
            .not('id', 'is', null)

        if (userStateError) {
            console.error('‚ùå Error resetting user interaction states:', userStateError.message)
        } else {
            console.log('‚úÖ User interaction states reset to initial state')
        }

        // 3. Clear t·∫•t c·∫£ conversations v√† messages
        console.log('3Ô∏è‚É£ Clearing conversations and messages...')

        // X√≥a messages tr∆∞·ªõc (foreign key constraint)
        const { error: messagesError } = await supabase
            .from('messages')
            .delete()
            .not('id', 'is', null)

        if (messagesError) {
            console.error('‚ùå Error clearing messages:', messagesError.message)
        } else {
            console.log('‚úÖ Messages cleared successfully')
        }

        // X√≥a conversations
        const { error: conversationsError } = await supabase
            .from('conversations')
            .delete()
            .not('id', 'is', null)

        if (conversationsError) {
            console.error('‚ùå Error clearing conversations:', conversationsError.message)
        } else {
            console.log('‚úÖ Conversations cleared successfully')
        }

        // 4. Clear c√°c b·∫£ng kh√°c li√™n quan ƒë·∫øn ho·∫°t ƒë·ªông
        console.log('4Ô∏è‚É£ Clearing activity-related data...')

        // X√≥a user activities
        const { error: activitiesError } = await supabase
            .from('user_activities')
            .delete()
            .not('id', 'is', null)

        if (activitiesError) {
            console.error('‚ùå Error clearing user activities:', activitiesError.message)
        } else {
            console.log('‚úÖ User activities cleared successfully')
        }

        // X√≥a user activity logs
        const { error: activityLogsError } = await supabase
            .from('user_activity_logs')
            .delete()
            .not('id', 'is', null)

        if (activityLogsError) {
            console.error('‚ùå Error clearing user activity logs:', activityLogsError.message)
        } else {
            console.log('‚úÖ User activity logs cleared successfully')
        }

        // 5. Clear cache v√† temporary data
        console.log('5Ô∏è‚É£ Clearing cache and temporary data...')

        // X√≥a AI analytics
        const { error: aiAnalyticsError } = await supabase
            .from('ai_analytics')
            .delete()
            .not('id', 'is', null)

        if (aiAnalyticsError) {
            console.error('‚ùå Error clearing AI analytics:', aiAnalyticsError.message)
        } else {
            console.log('‚úÖ AI analytics cleared successfully')
        }

        // X√≥a system metrics
        const { error: metricsError } = await supabase
            .from('system_metrics')
            .delete()
            .not('id', 'is', null)

        if (metricsError) {
            console.error('‚ùå Error clearing system metrics:', metricsError.message)
        } else {
            console.log('‚úÖ System metrics cleared successfully')
        }

        // X√≥a spam logs
        const { error: spamLogsError } = await supabase
            .from('spam_logs')
            .delete()
            .not('id', 'is', null)

        if (spamLogsError) {
            console.error('‚ùå Error clearing spam logs:', spamLogsError.message)
        } else {
            console.log('‚úÖ Spam logs cleared successfully')
        }

        // X√≥a spam tracking
        const { error: spamTrackingError } = await supabase
            .from('spam_tracking')
            .delete()
            .not('id', 'is', null)

        if (spamTrackingError) {
            console.error('‚ùå Error clearing spam tracking:', spamTrackingError.message)
        } else {
            console.log('‚úÖ Spam tracking cleared successfully')
        }

        // 6. Reset c√°c b·∫£ng ch√≠nh v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
        console.log('6Ô∏è‚É£ Resetting main tables to initial state...')

        // Reset user points v·ªÅ 0
        const { error: pointsError } = await supabase
            .from('user_points')
            .update({
                points: 0,
                level: 'ƒê·ªìng',
                streak_days: 0,
                last_activity_date: null,
                updated_at: new Date().toISOString()
            })
            .not('id', 'is', null)

        if (pointsError) {
            console.error('‚ùå Error resetting user points:', pointsError.message)
        } else {
            console.log('‚úÖ User points reset to initial state')
        }

        // X√≥a point transactions
        const { error: pointTransactionsError } = await supabase
            .from('point_transactions')
            .delete()
            .not('id', 'is', null)

        if (pointTransactionsError) {
            console.error('‚ùå Error clearing point transactions:', pointTransactionsError.message)
        } else {
            console.log('‚úÖ Point transactions cleared successfully')
        }

        // Reset notifications v·ªÅ unread = false (ƒë·ªÉ kh√¥ng spam user)
        const { error: notificationsError } = await supabase
            .from('notifications')
            .update({
                is_read: false,
                created_at: new Date().toISOString()
            })
            .not('id', 'is', null)

        if (notificationsError) {
            console.error('‚ùå Error resetting notifications:', notificationsError.message)
        } else {
            console.log('‚úÖ Notifications reset successfully')
        }

        // 7. Clear business data (optional - c√≥ th·ªÉ gi·ªØ l·∫°i n·∫øu mu·ªën test v·ªõi data m·∫´u)
        console.log('7Ô∏è‚É£ Clearing business data...')

        // X√≥a ads
        const { error: adsError } = await supabase
            .from('ads')
            .delete()
            .not('id', 'is', null)

        if (adsError) {
            console.error('‚ùå Error clearing ads:', adsError.message)
        } else {
            console.log('‚úÖ Ads cleared successfully')
        }

        // X√≥a events v√† participants
        const { error: eventParticipantsError } = await supabase
            .from('event_participants')
            .delete()
            .not('id', 'is', null)

        if (eventParticipantsError) {
            console.error('‚ùå Error clearing event participants:', eventParticipantsError.message)
        } else {
            console.log('‚úÖ Event participants cleared successfully')
        }

        const { error: eventsError } = await supabase
            .from('events')
            .delete()
            .not('id', 'is', null)

        if (eventsError) {
            console.error('‚ùå Error clearing events:', eventsError.message)
        } else {
            console.log('‚úÖ Events cleared successfully')
        }

        // X√≥a listings
        const { error: listingsError } = await supabase
            .from('listings')
            .delete()
            .not('id', 'is', null)

        if (listingsError) {
            console.error('‚ùå Error clearing listings:', listingsError.message)
        } else {
            console.log('‚úÖ Listings cleared successfully')
        }

        // X√≥a payments
        const { error: paymentsError } = await supabase
            .from('payments')
            .delete()
            .not('id', 'is', null)

        if (paymentsError) {
            console.error('‚ùå Error clearing payments:', paymentsError.message)
        } else {
            console.log('‚úÖ Payments cleared successfully')
        }

        // X√≥a ratings
        const { error: ratingsError } = await supabase
            .from('ratings')
            .delete()
            .not('id', 'is', null)

        if (ratingsError) {
            console.error('‚ùå Error clearing ratings:', ratingsError.message)
        } else {
            console.log('‚úÖ Ratings cleared successfully')
        }

        // X√≥a referrals
        const { error: referralsError } = await supabase
            .from('referrals')
            .delete()
            .not('id', 'is', null)

        if (referralsError) {
            console.error('‚ùå Error clearing referrals:', referralsError.message)
        } else {
            console.log('‚úÖ Referrals cleared successfully')
        }

        // X√≥a search requests
        const { error: searchRequestsError } = await supabase
            .from('search_requests')
            .delete()
            .not('id', 'is', null)

        if (searchRequestsError) {
            console.error('‚ùå Error clearing search requests:', searchRequestsError.message)
        } else {
            console.log('‚úÖ Search requests cleared successfully')
        }

        // 8. Reset admin states n·∫øu c·∫ßn thi·∫øt
        console.log('8Ô∏è‚É£ Checking admin states...')

        // ƒê·∫∑t l·∫°i admin chat sessions v·ªÅ tr·∫°ng th√°i inactive
        const { error: adminChatError } = await supabase
            .from('admin_chat_sessions')
            .update({
                status: 'inactive',
                updated_at: new Date().toISOString()
            })
            .not('id', 'is', null)

        if (adminChatError) {
            console.error('‚ùå Error resetting admin chat sessions:', adminChatError.message)
        } else {
            console.log('‚úÖ Admin chat sessions reset successfully')
        }

        // 9. ƒê·∫∑t l·∫°i bot settings v·ªÅ m·∫∑c ƒë·ªãnh
        console.log('9Ô∏è‚É£ Resetting bot settings to defaults...')

        const defaultSettings = {
            id: 'main',
            bot_status: 'active',
            maintenance_mode: false,
            welcome_message: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot T√¢n D·∫≠u! üéâ\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ ƒêƒÉng k√Ω t√†i kho·∫£n\n‚Ä¢ ƒêƒÉng tin mua b√°n\n‚Ä¢ T√¨m ki·∫øm s·∫£n ph·∫©m\n‚Ä¢ Thanh to√°n v√† giao d·ªãch\n‚Ä¢ Xem t·ª≠ vi h√†ng ng√†y\n‚Ä¢ Tham gia c·ªông ƒë·ªìng\n\nB·∫°n mu·ªën l√†m g√¨ n√†o? üí¨',
            max_daily_messages: 50,
            spam_threshold: 10,
            updated_at: new Date().toISOString()
        }

        const { error: settingsError } = await supabase
            .from('bot_settings')
            .upsert(defaultSettings)

        if (settingsError) {
            console.error('‚ùå Error resetting bot settings:', settingsError.message)
        } else {
            console.log('‚úÖ Bot settings reset to defaults')
        }

        console.log('')
        console.log('üéâ Complete cleanup finished!')
        console.log('üìä Database has been reset to initial state')
        console.log('üîÑ Ready for fresh testing!')
        console.log('')
        console.log('Summary of what was cleaned:')
        console.log('‚úÖ Bot sessions cleared')
        console.log('‚úÖ User interaction states reset')
        console.log('‚úÖ Conversations and messages cleared')
        console.log('‚úÖ User activities cleared')
        console.log('‚úÖ Cache and temporary data cleared')
        console.log('‚úÖ Business data cleared')
        console.log('‚úÖ Admin states reset')
        console.log('‚úÖ Bot settings reset to defaults')
        console.log('')
        console.log('üöÄ You can now start fresh testing!')

    } catch (error) {
        console.error('‚ùå Cleanup error:', error)
        process.exit(1)
    }
}

// Ch·∫°y cleanup n·∫øu script ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    completeCleanup()
}

module.exports = { completeCleanup }