/**
 * Script ƒë·ªÉ chu·∫©n b·ªã bot cho production
 * X√≥a t·∫•t c·∫£ d·ªØ li·ªáu test v√† gi·ªØ l·∫°i ch·ªâ admin users
 */

const { createClient } = require('@supabase/supabase-js')

// S·ª≠ d·ª•ng environment variables t·ª´ .env ho·∫∑c system
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://oxornnooldwivlexsnkf.supabase.co'
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseServiceKey) {
    console.error('‚ùå Thi·∫øu SUPABASE_SERVICE_ROLE_KEY')
    console.log('üí° H√£y set environment variable:')
    console.log('   export SUPABASE_SERVICE_ROLE_KEY="your_service_key"')
    process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function cleanupForProduction() {
    try {
        console.log('üöÄ CHU·∫®N B·ªä BOT CHO PRODUCTION')
        console.log('='.repeat(50))

        // 1. L·∫•y danh s√°ch admin users
        console.log('\n1Ô∏è‚É£ L·∫•y danh s√°ch admin users...')
        const { data: adminUsers, error: adminError } = await supabase
            .from('admin_users')
            .select('facebook_id, name')

        if (adminError) {
            console.error('‚ùå L·ªói l·∫•y admin users:', adminError)
            return
        }

        const adminIds = adminUsers?.map(admin => admin.facebook_id) || []
        console.log(`‚úÖ T√¨m th·∫•y ${adminIds.length} admin users:`)
        adminUsers?.forEach(admin => {
            console.log(`   - ${admin.name} (${admin.facebook_id})`)
        })

        // 2. X√≥a t·∫•t c·∫£ users kh√¥ng ph·∫£i admin
        console.log('\n2Ô∏è‚É£ X√≥a users kh√¥ng ph·∫£i admin...')
        let deletedUsers = 0

        if (adminIds.length > 0) {
            // X√≥a users kh√¥ng ph·∫£i admin
            const { data: users, error: usersError } = await supabase
                .from('users')
                .select('facebook_id, name, status')
                .not('facebook_id', 'in', `(${adminIds.join(',')})`)

            if (usersError) {
                console.error('‚ùå L·ªói l·∫•y users:', usersError)
            } else {
                console.log(`üìã T√¨m th·∫•y ${users?.length || 0} users c·∫ßn x√≥a:`)
                users?.forEach(user => {
                    console.log(`   - ${user.name} (${user.facebook_id}) - ${user.status}`)
                })

                // X√≥a t·ª´ng user m·ªôt ƒë·ªÉ tr√°nh l·ªói
                for (const user of users || []) {
                    const { error: deleteError } = await supabase
                        .from('users')
                        .delete()
                        .eq('facebook_id', user.facebook_id)

                    if (deleteError) {
                        console.error(`‚ùå L·ªói x√≥a user ${user.facebook_id}:`, deleteError)
                    } else {
                        deletedUsers++
                        console.log(`‚úÖ ƒê√£ x√≥a user: ${user.name}`)
                    }
                }
            }
        } else {
            // X√≥a t·∫•t c·∫£ users n·∫øu kh√¥ng c√≥ admin
            const { data: allUsers, error: allUsersError } = await supabase
                .from('users')
                .select('facebook_id, name, status')

            if (allUsersError) {
                console.error('‚ùå L·ªói l·∫•y t·∫•t c·∫£ users:', allUsersError)
            } else {
                console.log(`üìã T√¨m th·∫•y ${allUsers?.length || 0} users c·∫ßn x√≥a:`)
                allUsers?.forEach(user => {
                    console.log(`   - ${user.name} (${user.facebook_id}) - ${user.status}`)
                })

                // X√≥a t·∫•t c·∫£ users
                const { error: deleteAllError } = await supabase
                    .from('users')
                    .delete()
                    .neq('id', 0) // X√≥a t·∫•t c·∫£

                if (deleteAllError) {
                    console.error('‚ùå L·ªói x√≥a t·∫•t c·∫£ users:', deleteAllError)
                } else {
                    deletedUsers = allUsers?.length || 0
                    console.log(`‚úÖ ƒê√£ x√≥a ${deletedUsers} users`)
                }
            }
        }

        // 3. X√≥a bot sessions
        console.log('\n3Ô∏è‚É£ X√≥a bot sessions...')
        const { data: deletedSessions, error: sessionError } = await supabase
            .from('bot_sessions')
            .delete()
            .neq('id', 0) // X√≥a t·∫•t c·∫£
            .select()

        if (sessionError) {
            console.error('‚ùå L·ªói x√≥a sessions:', sessionError)
        } else {
            console.log(`‚úÖ ƒê√£ x√≥a ${deletedSessions?.length || 0} session records`)
        }

        // 4. X√≥a spam logs
        console.log('\n4Ô∏è‚É£ X√≥a spam logs...')
        const { data: deletedSpamLogs, error: spamError } = await supabase
            .from('spam_logs')
            .delete()
            .neq('id', 0) // X√≥a t·∫•t c·∫£
            .select()

        if (spamError) {
            console.error('‚ùå L·ªói x√≥a spam logs:', spamError)
        } else {
            console.log(`‚úÖ ƒê√£ x√≥a ${deletedSpamLogs?.length || 0} spam log records`)
        }

        // 5. X√≥a user activities
        console.log('\n5Ô∏è‚É£ X√≥a user activities...')
        const { data: deletedActivities, error: activityError } = await supabase
            .from('user_activities')
            .delete()
            .neq('id', 0) // X√≥a t·∫•t c·∫£
            .select()

        if (activityError) {
            console.error('‚ùå L·ªói x√≥a user activities:', activityError)
        } else {
            console.log(`‚úÖ ƒê√£ x√≥a ${deletedActivities?.length || 0} activity records`)
        }

        // 6. X√≥a listings test
        console.log('\n6Ô∏è‚É£ X√≥a listings test...')
        const { data: deletedListings, error: listingError } = await supabase
            .from('listings')
            .delete()
            .neq('id', 0) // X√≥a t·∫•t c·∫£
            .select()

        if (listingError) {
            console.error('‚ùå L·ªói x√≥a listings:', listingError)
        } else {
            console.log(`‚úÖ ƒê√£ x√≥a ${deletedListings?.length || 0} listing records`)
        }

        // 7. X√≥a search requests
        console.log('\n7Ô∏è‚É£ X√≥a search requests...')
        const { data: deletedSearches, error: searchError } = await supabase
            .from('search_requests')
            .delete()
            .neq('id', 0) // X√≥a t·∫•t c·∫£
            .select()

        if (searchError) {
            console.error('‚ùå L·ªói x√≥a search requests:', searchError)
        } else {
            console.log(`‚úÖ ƒê√£ x√≥a ${deletedSearches?.length || 0} search request records`)
        }

        // 8. X√≥a payments test
        console.log('\n8Ô∏è‚É£ X√≥a payments test...')
        const { data: deletedPayments, error: paymentError } = await supabase
            .from('payments')
            .delete()
            .neq('id', 0) // X√≥a t·∫•t c·∫£
            .select()

        if (paymentError) {
            console.error('‚ùå L·ªói x√≥a payments:', paymentError)
        } else {
            console.log(`‚úÖ ƒê√£ x√≥a ${deletedPayments?.length || 0} payment records`)
        }

        console.log('\nüéâ CLEANUP HO√ÄN TH√ÄNH!')
        console.log('='.repeat(50))
        console.log(`üìä T·ªïng k·∫øt:`)
        console.log(`   - ƒê√£ x√≥a ${deletedUsers} users`)
        console.log(`   - ƒê√£ x√≥a ${deletedSessions?.length || 0} sessions`)
        console.log(`   - ƒê√£ x√≥a ${deletedSpamLogs?.length || 0} spam logs`)
        console.log(`   - ƒê√£ x√≥a ${deletedActivities?.length || 0} activities`)
        console.log(`   - ƒê√£ x√≥a ${deletedListings?.length || 0} listings`)
        console.log(`   - ƒê√£ x√≥a ${deletedSearches?.length || 0} search requests`)
        console.log(`   - ƒê√£ x√≥a ${deletedPayments?.length || 0} payments`)
        console.log(`   - Gi·ªØ l·∫°i ${adminIds.length} admin users`)

        console.log('\n‚úÖ BOT ƒê√É S·∫¥N S√ÄNG CHO PRODUCTION!')
        console.log('üîÑ B√¢y gi·ªù b·∫°n c√≥ th·ªÉ test v·ªõi user Facebook th·∫≠t')

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh cleanup:', error)
    }
}

// Ch·∫°y script
cleanupForProduction()
