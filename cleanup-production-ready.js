#!/usr/bin/env node

/**
 * CLEANUP PRODUCTION READY
 * D·ªçn d·∫πp database v√† c·∫≠p nh·∫≠t bi·∫øn m√¥i tr∆∞·ªùng sau khi refactor admin logic
 * 
 * Thay ƒë·ªïi ch√≠nh:
 * - Tin nh·∫Øn t·ª´ fanpage (FACEBOOK_APP_ID) = admin t·ª± ƒë·ªông
 * - Kh√¥ng c·∫ßn admin_users table n·ªØa
 * - Kh√¥ng c·∫ßn ADMIN_IDS n·ªØa
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

// Supabase config
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Missing Supabase credentials')
    process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function cleanupDatabase() {
    console.log('üßπ Starting database cleanup...')

    try {
        // 1. Ki·ªÉm tra admin_users table c√≥ t·ªìn t·∫°i kh√¥ng
        console.log('üìã Checking admin_users table...')
        const { data: adminTable, error: adminError } = await supabase
            .from('admin_users')
            .select('*')
            .limit(1)

        if (adminError && adminError.code === 'PGRST116') {
            console.log('‚úÖ admin_users table does not exist (already clean)')
        } else if (adminError) {
            console.log('‚ö†Ô∏è  Error checking admin_users table:', adminError.message)
        } else {
            console.log('‚ÑπÔ∏è  admin_users table exists but will be ignored by new logic')
        }

        // 2. Ki·ªÉm tra chat_bot_offer_counts table
        console.log('üìä Checking chat_bot_offer_counts table...')
        const { data: offerTable, error: offerError } = await supabase
            .from('chat_bot_offer_counts')
            .select('*')
            .limit(1)

        if (offerError && offerError.code === 'PGRST116') {
            console.log('‚ö†Ô∏è  chat_bot_offer_counts table does not exist - creating...')

            // T·∫°o table n·∫øu ch∆∞a c√≥
            const { error: createError } = await supabase
                .from('chat_bot_offer_counts')
                .select('*')
                .limit(0)

            if (createError) {
                console.log('‚ùå Cannot create chat_bot_offer_counts table:', createError.message)
            } else {
                console.log('‚úÖ chat_bot_offer_counts table ready')
            }
        } else if (offerError) {
            console.log('‚ö†Ô∏è  Error checking chat_bot_offer_counts table:', offerError.message)
        } else {
            console.log('‚úÖ chat_bot_offer_counts table exists and working')
        }

        console.log('üéâ Database cleanup completed!')

    } catch (error) {
        console.error('‚ùå Database cleanup failed:', error.message)
        throw error
    }
}

async function updateEnvironmentVariables() {
    console.log('üîß Updating environment variables...')

    try {
        // ƒê·ªçc file .env.local
        const fs = require('fs')
        const path = require('path')

        const envPath = path.join(process.cwd(), '.env.local')

        if (!fs.existsSync(envPath)) {
            console.log('‚ö†Ô∏è  .env.local not found, creating from template...')

            // T·∫°o t·ª´ vercel-env-variables-clean.env
            const templatePath = path.join(process.cwd(), 'vercel-env-variables-clean.env')
            if (fs.existsSync(templatePath)) {
                const templateContent = fs.readFileSync(templatePath, 'utf8')
                fs.writeFileSync(envPath, templateContent)
                console.log('‚úÖ Created .env.local from template')
            } else {
                console.log('‚ùå Template file not found')
                return
            }
        }

        let envContent = fs.readFileSync(envPath, 'utf8')

        // C·∫≠p nh·∫≠t ADMIN_IDS
        if (envContent.includes('ADMIN_IDS=')) {
            envContent = envContent.replace(
                /ADMIN_IDS=.*/g,
                '# DEPRECATED: Admin IDs no longer needed - fanpage messages are automatically admin\n# ADMIN_IDS=100074107869848,100026336745820,100000699238053'
            )
            console.log('‚úÖ Updated ADMIN_IDS in .env.local')
        }

        // ƒê·∫£m b·∫£o FACEBOOK_APP_ID c√≥ gi√° tr·ªã
        if (!envContent.includes('FACEBOOK_APP_ID=')) {
            envContent += '\nFACEBOOK_APP_ID=1246774479717275\n'
            console.log('‚úÖ Added FACEBOOK_APP_ID to .env.local')
        }

        // Ghi l·∫°i file
        fs.writeFileSync(envPath, envContent)
        console.log('‚úÖ Environment variables updated!')

    } catch (error) {
        console.error('‚ùå Environment update failed:', error.message)
        throw error
    }
}

async function verifyChanges() {
    console.log('üîç Verifying changes...')

    try {
        // Ki·ªÉm tra FACEBOOK_APP_ID
        const appId = process.env.FACEBOOK_APP_ID
        if (!appId) {
            console.log('‚ùå FACEBOOK_APP_ID not found in environment')
            return false
        }
        console.log(`‚úÖ FACEBOOK_APP_ID: ${appId}`)

        // Ki·ªÉm tra ADMIN_IDS ƒë√£ ƒë∆∞·ª£c comment
        const adminIds = process.env.ADMIN_IDS
        if (adminIds && !adminIds.startsWith('#')) {
            console.log('‚ö†Ô∏è  ADMIN_IDS still active, should be commented out')
        } else {
            console.log('‚úÖ ADMIN_IDS properly commented out')
        }

        console.log('üéâ Verification completed!')
        return true

    } catch (error) {
        console.error('‚ùå Verification failed:', error.message)
        return false
    }
}

async function main() {
    console.log('üöÄ Starting production cleanup...')
    console.log('=====================================')

    try {
        await cleanupDatabase()
        console.log('')
        await updateEnvironmentVariables()
        console.log('')
        await verifyChanges()

        console.log('')
        console.log('üéâ CLEANUP COMPLETED SUCCESSFULLY!')
        console.log('=====================================')
        console.log('‚úÖ Database cleaned up')
        console.log('‚úÖ Environment variables updated')
        console.log('‚úÖ Admin logic refactored')
        console.log('')
        console.log('üìã Next steps:')
        console.log('1. Deploy to Vercel')
        console.log('2. Test admin functionality from fanpage')
        console.log('3. Verify normal user flow still works')

    } catch (error) {
        console.error('')
        console.error('‚ùå CLEANUP FAILED!')
        console.error('=====================================')
        console.error('Error:', error.message)
        process.exit(1)
    }
}

// Ch·∫°y cleanup
if (require.main === module) {
    main()
}

module.exports = {
    cleanupDatabase,
    updateEnvironmentVariables,
    verifyChanges
}
