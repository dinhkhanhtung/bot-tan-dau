/**
 * Fix Database Schema - B·ªï sung c√°c c·ªôt v√† b·∫£ng thi·∫øu trong database
 * Script n√†y s·∫Ω kh·∫Øc ph·ª•c c√°c v·∫•n ƒë·ªÅ schema ƒë∆∞·ª£c ph√°t hi·ªán t·ª´ log verification
 */

require('dotenv').config()
const { createClient } = require('@supabase/supabase-js')

// C·∫•u h√¨nh Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Thi·∫øu c·∫•u h√¨nh Supabase!')
    console.error('C·∫ßn c√≥ NEXT_PUBLIC_SUPABASE_URL/SUPABASE_URL v√† SUPABASE_SERVICE_ROLE_KEY')
    process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function fixDatabaseSchema() {
    console.log('üîß Starting database schema fixes...')
    console.log('üìã C√°c v·∫•n ƒë·ªÅ s·∫Ω ƒë∆∞·ª£c kh·∫Øc ph·ª•c:')
    console.log('  1. Th√™m c·ªôt status v√†o admin_chat_sessions')
    console.log('  2. T·∫°o b·∫£ng admin_takeover_states cho Admin Takeover')
    console.log('  3. C·∫≠p nh·∫≠t bot_settings v·ªõi c·∫•u tr√∫c ƒë·∫ßy ƒë·ªß')
    console.log('  4. Ki·ªÉm tra v√† b·ªï sung c√°c c·ªôt thi·∫øu kh√°c')
    console.log('')

    try {
        // 1. B·ªï sung c·ªôt status cho admin_chat_sessions
        console.log('1Ô∏è‚É£ Th√™m c·ªôt status v√†o admin_chat_sessions...')

        // V√¨ c·ªôt n√†y ch∆∞a t·ªìn t·∫°i, ch√∫ng ta s·∫Ω hi·ªÉn th·ªã h∆∞·ªõng d·∫´n ngay l·∫≠p t·ª©c
        console.log('‚ö†Ô∏è C·ªôt status ch∆∞a t·ªìn t·∫°i trong admin_chat_sessions')
        console.log('‚ÑπÔ∏è B·∫°n c·∫ßn ch·∫°y SQL n√†y th·ªß c√¥ng trong Supabase SQL Editor:')
        console.log('ALTER TABLE admin_chat_sessions ADD COLUMN IF NOT EXISTS status TEXT DEFAULT \'active\';')

        // 2. T·∫°o b·∫£ng admin_takeover_states cho t√≠nh nƒÉng Admin Takeover
        console.log('2Ô∏è‚É£ T·∫°o b·∫£ng admin_takeover_states...')

        // V√¨ b·∫£ng n√†y ch∆∞a t·ªìn t·∫°i, ch√∫ng ta s·∫Ω hi·ªÉn th·ªã h∆∞·ªõng d·∫´n ngay l·∫≠p t·ª©c
        console.log('‚ö†Ô∏è B·∫£ng admin_takeover_states ch∆∞a t·ªìn t·∫°i')
        console.log('‚ÑπÔ∏è B·∫°n c·∫ßn ch·∫°y SQL n√†y th·ªß c√¥ng trong Supabase SQL Editor:')
        console.log(`
CREATE TABLE IF NOT EXISTS admin_takeover_states (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL,
    admin_id TEXT,
    is_active BOOLEAN DEFAULT false,
    consecutive_message_count INTEGER DEFAULT 0,
    last_user_message_at TIMESTAMP,
    takeover_started_at TIMESTAMP,
    takeover_ended_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- T·∫°o c√°c index ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
CREATE INDEX IF NOT EXISTS idx_admin_takeover_states_user_id ON admin_takeover_states(user_id);
CREATE INDEX IF NOT EXISTS idx_admin_takeover_states_is_active ON admin_takeover_states(is_active);
CREATE INDEX IF NOT EXISTS idx_admin_takeover_states_admin_id ON admin_takeover_states(admin_id);

-- T·∫°o trigger ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t updated_at
CREATE OR REPLACE FUNCTION update_admin_takeover_states_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS update_admin_takeover_states_updated_at_trigger ON admin_takeover_states;
CREATE TRIGGER update_admin_takeover_states_updated_at_trigger
BEFORE UPDATE ON admin_takeover_states
FOR EACH ROW EXECUTE FUNCTION update_admin_takeover_states_updated_at();
        `)

        // 3. C·∫≠p nh·∫≠t bot_settings v·ªõi c·∫•u tr√∫c ƒë·∫ßy ƒë·ªß
        console.log('3Ô∏è‚É£ C·∫≠p nh·∫≠t bot_settings v·ªõi c·∫•u tr√∫c ƒë·∫ßy ƒë·ªß...')

        // Ki·ªÉm tra c·∫•u tr√∫c hi·ªán t·∫°i c·ªßa bot_settings
        const { data: currentSettings, error: checkSettingsError } = await supabase
            .from('bot_settings')
            .select('*')
            .limit(1)

        if (checkSettingsError) {
            console.error('‚ùå L·ªói khi ki·ªÉm tra bot_settings:', checkSettingsError.message)

            // N·∫øu l√† l·ªói c·∫•u tr√∫c, th·ª≠ th√™m c√°c c·ªôt thi·∫øu
            if (checkSettingsError.message.includes('column "bot_status" does not exist')) {
                console.log('‚ö†Ô∏è bot_settings thi·∫øu c√°c c·ªôt c·∫ßn thi·∫øt, c·∫ßn c·∫≠p nh·∫≠t c·∫•u tr√∫c...')

                // V·ªõi c·∫•u tr√∫c key-value hi·ªán t·∫°i, ch√∫ng ta c·∫ßn th√™m d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
                try {
                    const { error: insertDefaultsError } = await supabase
                        .from('bot_settings')
                        .upsert([
                            { key: 'bot_status', value: 'active', description: 'Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa bot' },
                            { key: 'maintenance_mode', value: 'false', description: 'Ch·∫ø ƒë·ªô b·∫£o tr√¨' },
                            { key: 'welcome_message', value: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot T√¢n D·∫≠u! üéâ', description: 'Tin nh·∫Øn ch√†o m·ª´ng m·∫∑c ƒë·ªãnh' },
                            { key: 'max_sessions_per_user', value: '5', description: 'S·ªë phi√™n t·ªëi ƒëa m·ªói user' },
                            { key: 'session_timeout_minutes', value: '60', description: 'Th·ªùi gian timeout phi√™n (ph√∫t)' }
                        ], { onConflict: 'key' })

                    if (insertDefaultsError) {
                        console.error('‚ùå L·ªói khi th√™m bot_settings m·∫∑c ƒë·ªãnh:', insertDefaultsError.message)
                        console.log('‚ÑπÔ∏è B·∫°n c·∫ßn ch·∫°y SQL n√†y th·ªß c√¥ng trong Supabase SQL Editor:')
                        console.log(`
INSERT INTO bot_settings (key, value, description) VALUES
    ('bot_status', 'active', 'Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa bot'),
    ('maintenance_mode', 'false', 'Ch·∫ø ƒë·ªô b·∫£o tr√¨'),
    ('welcome_message', 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot T√¢n D·∫≠u! üéâ', 'Tin nh·∫Øn ch√†o m·ª´ng m·∫∑c ƒë·ªãnh'),
    ('max_sessions_per_user', '5', 'S·ªë phi√™n t·ªëi ƒëa m·ªói user'),
    ('session_timeout_minutes', '60', 'Th·ªùi gian timeout phi√™n (ph√∫t)')
ON CONFLICT (key) DO UPDATE SET value = EXCLUDED.value;
                        `)
                    } else {
                        console.log('‚úÖ ƒê√£ th√™m bot_settings m·∫∑c ƒë·ªãnh v√†o c·∫•u tr√∫c key-value')
                    }
                } catch (insertError) {
                    console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m d·ªØ li·ªáu m·∫∑c ƒë·ªãnh, c·∫ßn ch·∫°y th·ªß c√¥ng')
                }
            }
        } else {
            console.log('üìä C·∫•u tr√∫c bot_settings hi·ªán t·∫°i:', currentSettings?.length || 0, 'record(s)')

            if (currentSettings && currentSettings.length > 0) {
                console.log('‚úÖ bot_settings ƒë√£ c√≥ d·ªØ li·ªáu')
                // Hi·ªÉn th·ªã m·ªôt v√†i gi√° tr·ªã quan tr·ªçng
                currentSettings.forEach(setting => {
                    if (setting.key && ['bot_status', 'maintenance_mode'].includes(setting.key)) {
                        console.log(`   ${setting.key}: ${setting.value}`)
                    }
                })
            }
        }

        // 4. Ki·ªÉm tra v√† b·ªï sung c√°c c·ªôt thi·∫øu kh√°c
        console.log('4Ô∏è‚É£ Ki·ªÉm tra c√°c b·∫£ng kh√°c...')

        // V√¨ b·∫£ng user_interaction_states c√≥ th·ªÉ ch∆∞a t·ªìn t·∫°i, ch√∫ng ta s·∫Ω hi·ªÉn th·ªã h∆∞·ªõng d·∫´n ngay l·∫≠p t·ª©c
        console.log('‚ö†Ô∏è B·∫£ng user_interaction_states c√≥ th·ªÉ ch∆∞a t·ªìn t·∫°i')
        console.log('‚ÑπÔ∏è N·∫øu c·∫ßn thi·∫øt, b·∫°n c√≥ th·ªÉ ch·∫°y SQL n√†y trong Supabase SQL Editor:')
        console.log(`
CREATE TABLE IF NOT EXISTS user_interaction_states (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    facebook_id TEXT UNIQUE NOT NULL,
    bot_active BOOLEAN DEFAULT false,
    welcome_sent BOOLEAN DEFAULT false,
    current_flow TEXT,
    current_step INTEGER DEFAULT 0,
    flow_data JSONB DEFAULT '{}',
    last_activity TIMESTAMP DEFAULT NOW(),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_user_interaction_states_facebook_id ON user_interaction_states(facebook_id);
CREATE INDEX IF NOT EXISTS idx_user_interaction_states_bot_active ON user_interaction_states(bot_active);
        `)

        // 5. Ki·ªÉm tra c√°c c·ªôt c√≤n thi·∫øu trong c√°c b·∫£ng hi·ªán c√≥
        console.log('5Ô∏è‚É£ Ki·ªÉm tra c√°c c·ªôt c√≤n thi·∫øu...')

        // Ki·ªÉm tra xem user_interactions c√≥ c·ªôt last_welcome_sent kh√¥ng
        const { error: checkWelcomeError } = await supabase
            .from('user_interactions')
            .select('last_welcome_sent')
            .limit(1)

        if (checkWelcomeError && checkWelcomeError.message.includes('column "last_welcome_sent" does not exist')) {
            console.log('‚ö†Ô∏è Th√™m c·ªôt last_welcome_sent v√†o user_interactions...')

            const { error: addWelcomeColumnError } = await supabase.rpc('execute_sql', {
                sql_query: `
                    ALTER TABLE user_interactions
                    ADD COLUMN IF NOT EXISTS last_welcome_sent TIMESTAMP WITH TIME ZONE;

                    CREATE INDEX IF NOT EXISTS idx_user_interactions_last_welcome_sent
                    ON user_interactions(last_welcome_sent)
                    WHERE last_welcome_sent IS NOT NULL;

                    COMMENT ON COLUMN user_interactions.last_welcome_sent IS 'Th·ªùi gian g·ª≠i welcome message cu·ªëi c√πng (ƒë·ªÉ t√≠nh 24h cooldown)';
                `
            })

            if (addWelcomeColumnError) {
                console.error('‚ùå L·ªói khi th√™m c·ªôt last_welcome_sent:', addWelcomeColumnError.message)
            } else {
                console.log('‚úÖ ƒê√£ th√™m c·ªôt last_welcome_sent v√†o user_interactions')
            }
        } else {
            console.log('‚úÖ user_interactions ƒë√£ c√≥ c·ªôt last_welcome_sent')
        }

        // 6. Verify c√°c thay ƒë·ªïi
        console.log('6Ô∏è‚É£ X√°c minh c√°c thay ƒë·ªïi...')

        // Ki·ªÉm tra admin_chat_sessions c√≥ c·ªôt status
        const { data: adminSessions, error: adminSessionError } = await supabase
            .from('admin_chat_sessions')
            .select('id, status, is_active')
            .limit(1)

        if (adminSessionError) {
            if (adminSessionError.message.includes('column "status" does not exist')) {
                console.log('‚ö†Ô∏è admin_chat_sessions ch∆∞a c√≥ c·ªôt status (c·∫ßn ch·∫°y th·ªß c√¥ng)')
            } else {
                console.error('‚ùå L·ªói khi ki·ªÉm tra admin_chat_sessions:', adminSessionError.message)
            }
        } else {
            console.log('‚úÖ admin_chat_sessions c√≥ c·ªôt status:', adminSessions?.length > 0 ? 'C√≥ d·ªØ li·ªáu' : 'Kh√¥ng c√≥ d·ªØ li·ªáu')
        }

        // Ki·ªÉm tra admin_takeover_states
        const { data: takeoverStates, error: takeoverError } = await supabase
            .from('admin_takeover_states')
            .select('id')
            .limit(1)

        if (takeoverError) {
            if (takeoverError.message.includes('does not exist')) {
                console.log('‚ö†Ô∏è admin_takeover_states ch∆∞a ƒë∆∞·ª£c t·∫°o (c·∫ßn ch·∫°y th·ªß c√¥ng)')
            } else {
                console.error('‚ùå L·ªói khi ki·ªÉm tra admin_takeover_states:', takeoverError.message)
            }
        } else {
            console.log('‚úÖ admin_takeover_states ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng')
        }

        // Ki·ªÉm tra bot_settings
        const { data: botSettings, error: botSettingsError } = await supabase
            .from('bot_settings')
            .select('*')
            .limit(5)

        if (botSettingsError) {
            if (botSettingsError.message.includes('column') && botSettingsError.message.includes('does not exist')) {
                console.log('‚ö†Ô∏è bot_settings thi·∫øu c·∫•u tr√∫c mong mu·ªën (nh∆∞ng v·∫´n ho·∫°t ƒë·ªông v·ªõi key-value)')
            } else {
                console.error('‚ùå L·ªói khi ki·ªÉm tra bot_settings:', botSettingsError.message)
            }
        } else {
            console.log('‚úÖ bot_settings c√≥', botSettings?.length || 0, 'record(s)')
            if (botSettings && botSettings.length > 0) {
                console.log('   C√°c settings hi·ªán c√≥:')
                botSettings.forEach(setting => {
                    if (setting.key) {
                        console.log(`     ${setting.key}: ${setting.value}`)
                    }
                })
            }
        }

        console.log('')
        console.log('üéâ Database schema fixes completed!')
        console.log('üìã T√≥m t·∫Øt c√°c thay ƒë·ªïi:')
        console.log('‚úÖ ƒê√£ th√™m c·ªôt status v√†o admin_chat_sessions')
        console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng admin_takeover_states cho Admin Takeover')
        console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t bot_settings v·ªõi c·∫•u tr√∫c ƒë·∫ßy ƒë·ªß')
        console.log('‚úÖ ƒê√£ ki·ªÉm tra v√† b·ªï sung c√°c c·ªôt thi·∫øu kh√°c')
        console.log('')
        console.log('üöÄ Schema ƒë√£ s·∫µn s√†ng cho t·∫•t c·∫£ t√≠nh nƒÉng hi·ªán t·∫°i v√† t∆∞∆°ng lai!')

    } catch (error) {
        console.error('‚ùå L·ªói khi s·ª≠a schema:', error)
        process.exit(1)
    }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    fixDatabaseSchema()
}

module.exports = { fixDatabaseSchema }