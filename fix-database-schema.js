/**
 * Fix Database Schema - C·∫≠p nh·∫≠t database schema ƒë·ªÉ kh·∫Øc ph·ª•c l·ªói
 * Ch·∫°y script n√†y ƒë·ªÉ th√™m c√°c column b·ªã thi·∫øu
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Missing Supabase environment variables')
    process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
    auth: {
        autoRefreshToken: false,
        persistSession: false
    }
})

async function fixDatabaseSchema() {
    console.log('üîß Starting database schema fix...')

    try {
        // 1. Th√™m column last_welcome_sent v√†o b·∫£ng users
        console.log('üìù Adding last_welcome_sent column to users table...')
        const { error: addColumnError } = await supabase.rpc('execute_sql', {
            sql_query: `
                ALTER TABLE users
                ADD COLUMN IF NOT EXISTS last_welcome_sent TIMESTAMP WITH TIME ZONE;
            `,
            sql_params: []
        })

        if (addColumnError) {
            console.log('‚ö†Ô∏è Column might already exist, continuing...')
        }

        // 2. T·∫°o index cho column m·ªõi
        console.log('üìä Creating index for last_welcome_sent...')
        const { error: indexError } = await supabase.rpc('execute_sql', {
            sql_query: `
                CREATE INDEX IF NOT EXISTS idx_users_last_welcome_sent
                ON users(last_welcome_sent)
                WHERE last_welcome_sent IS NOT NULL;
            `,
            sql_params: []
        })

        if (indexError) {
            console.log('‚ö†Ô∏è Index might already exist, continuing...')
        }

        // 3. C·∫≠p nh·∫≠t c√°c column c·∫ßn thi·∫øt cho user_interactions
        console.log('üîÑ Updating user_interactions table...')

        // Th√™m current_state column
        await supabase.rpc('execute_sql', {
            sql_query: `
                ALTER TABLE user_interactions
                ADD COLUMN IF NOT EXISTS current_state VARCHAR(20) DEFAULT 'choosing_mode'
                CHECK (current_state IN ('new_user', 'choosing_mode', 'using_bot', 'chatting_admin'));
            `,
            sql_params: []
        })

        // Th√™m last_state_change column
        await supabase.rpc('execute_sql', {
            sql_query: `
                ALTER TABLE user_interactions
                ADD COLUMN IF NOT EXISTS last_state_change TIMESTAMP WITH TIME ZONE DEFAULT NOW();
            `,
            sql_params: []
        })

        // Th√™m state_change_count column
        await supabase.rpc('execute_sql', {
            sql_query: `
                ALTER TABLE user_interactions
                ADD COLUMN IF NOT EXISTS state_change_count INTEGER DEFAULT 0;
            `,
            sql_params: []
        })

        // 4. T·∫°o indexes cho user_interactions
        await supabase.rpc('execute_sql', {
            sql_query: `
                CREATE INDEX IF NOT EXISTS idx_user_interactions_current_state
                ON user_interactions(current_state);

                CREATE INDEX IF NOT EXISTS idx_user_interactions_last_state_change
                ON user_interactions(last_state_change);
            `,
            sql_params: []
        })

        // 5. C·∫≠p nh·∫≠t d·ªØ li·ªáu hi·ªán c√≥
        console.log('üîÑ Updating existing data...')

        // C·∫≠p nh·∫≠t user_interactions ƒë·ªÉ c√≥ current_state m·∫∑c ƒë·ªãnh
        await supabase.rpc('execute_sql', {
            sql_query: `
                UPDATE user_interactions
                SET current_state = 'choosing_mode'
                WHERE current_state IS NULL;
            `,
            sql_params: []
        })

        // C·∫≠p nh·∫≠t users ƒë·ªÉ c√≥ last_welcome_sent m·∫∑c ƒë·ªãnh
        await supabase.rpc('execute_sql', {
            sql_query: `
                UPDATE users
                SET last_welcome_sent = NOW()
                WHERE welcome_sent = true AND last_welcome_sent IS NULL;
            `,
            sql_params: []
        })

        console.log('‚úÖ Database schema fix completed successfully!')

        // 6. Ki·ªÉm tra k·∫øt qu·∫£
        console.log('üîç Verifying fixes...')

        const { data: usersCheck } = await supabase
            .from('users')
            .select('facebook_id, welcome_sent, last_welcome_sent')
            .limit(3)

        const { data: interactionsCheck } = await supabase
            .from('user_interactions')
            .select('facebook_id, current_state, last_state_change')
            .limit(3)

        console.log('üë• Users sample:', usersCheck)
        console.log('üîó Interactions sample:', interactionsCheck)

        console.log('üéâ All fixes applied successfully!')

    } catch (error) {
        console.error('‚ùå Error fixing database schema:', error)
        process.exit(1)
    }
}

// Ch·∫°y script
fixDatabaseSchema()
