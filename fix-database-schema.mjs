/**
 * Fix Database Schema - C·∫≠p nh·∫≠t database schema ƒë·ªÉ kh·∫Øc ph·ª•c l·ªói
 * Ch·∫°y script n√†y ƒë·ªÉ th√™m c√°c column b·ªã thi·∫øu
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// Load environment variables
dotenv.config()

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Missing Supabase environment variables')
    process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
    auth: {
        autoRefreshToken: false,
        persistSession: false
    }
})

async function fixDatabaseSchema() {
    console.log('üîß Starting database schema fix...')

    try {
        // 1. T·∫°o bot_settings table n·∫øu ch∆∞a c√≥
        console.log('üìù Creating bot_settings table...')
        const { error: botSettingsError } = await supabase.rpc('execute_sql', {
            sql_query: `
                CREATE TABLE IF NOT EXISTS bot_settings (
                    id SERIAL PRIMARY KEY,
                    key VARCHAR(100) UNIQUE NOT NULL,
                    value TEXT NOT NULL,
                    description TEXT,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                );
            `,
            sql_params: []
        })

        if (botSettingsError) {
            console.log('‚ö†Ô∏è Table might already exist, continuing...')
        }

        // 2. Th√™m default bot settings
        console.log('‚öôÔ∏è Inserting default bot settings...')
        const { error: settingsError } = await supabase.rpc('execute_sql', {
            sql_query: `
                INSERT INTO bot_settings (key, value, description)
                VALUES
                    ('bot_status', 'active', 'Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa bot (active/stopped)'),
                    ('ai_status', 'active', 'Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa AI (active/stopped)'),
                    ('payment_fee', '7000', 'Ph√≠ d·ªãch v·ª• m·ªói ng√†y (VNƒê)'),
                    ('trial_days', '3', 'S·ªë ng√†y d√πng th·ª≠ mi·ªÖn ph√≠'),
                    ('max_listings_per_user', '10', 'S·ªë tin ƒëƒÉng t·ªëi ƒëa m·ªói user'),
                    ('auto_approve_listings', 'false', 'T·ª± ƒë·ªông duy·ªát tin ƒëƒÉng m·ªõi'),
                    ('maintenance_mode', 'false', 'Ch·∫ø ƒë·ªô b·∫£o tr√¨ h·ªá th·ªëng'),
                    ('auto_approve_payments', 'false', 'T·ª± ƒë·ªông duy·ªát thanh to√°n'),
                    ('payment_approval_timeout', '24', 'Th·ªùi gian ch·ªù duy·ªát thanh to√°n (gi·ªù)')
                ON CONFLICT (key) DO NOTHING;
            `,
            sql_params: []
        })

        if (settingsError) {
            console.log('‚ö†Ô∏è Settings might already exist, continuing...')
        }

        // 3. Th√™m column last_welcome_sent v√†o b·∫£ng users
        console.log('üìù Adding last_welcome_sent column to users table...')
        const { error: addColumnError } = await supabase.rpc('execute_sql', {
            sql_query: `
                ALTER TABLE users
                ADD COLUMN IF NOT EXISTS last_welcome_sent TIMESTAMP WITH TIME ZONE;
            `,
            sql_params: []
        })

        if (addColumnError) {
            console.log('‚ö†Ô∏è Column might already exist, continuing...')
        }

        // 4. T·∫°o index cho column m·ªõi
        console.log('üìä Creating index for last_welcome_sent...')
        const { error: indexError } = await supabase.rpc('execute_sql', {
            sql_query: `
                CREATE INDEX IF NOT EXISTS idx_users_last_welcome_sent
                ON users(last_welcome_sent)
                WHERE last_welcome_sent IS NOT NULL;
            `,
            sql_params: []
        })

        if (indexError) {
            console.log('‚ö†Ô∏è Index might already exist, continuing...')
        }

        // 5. C·∫≠p nh·∫≠t c√°c column c·∫ßn thi·∫øt cho user_interactions
        console.log('üîÑ Updating user_interactions table...')

        // Th√™m current_mode column
        await supabase.rpc('execute_sql', {
            sql_query: `
                ALTER TABLE user_interactions
                ADD COLUMN IF NOT EXISTS current_mode VARCHAR(20) DEFAULT 'choosing'
                CHECK (current_mode IN ('choosing', 'using_bot', 'chatting_admin'));
            `,
            sql_params: []
        })

        // Th√™m last_mode_change column
        await supabase.rpc('execute_sql', {
            sql_query: `
                ALTER TABLE user_interactions
                ADD COLUMN IF NOT EXISTS last_mode_change TIMESTAMP WITH TIME ZONE DEFAULT NOW();
            `,
            sql_params: []
        })

        // Th√™m mode_change_count column
        await supabase.rpc('execute_sql', {
            sql_query: `
                ALTER TABLE user_interactions
                ADD COLUMN IF NOT EXISTS mode_change_count INTEGER DEFAULT 0;
            `,
            sql_params: []
        })

        // 6. T·∫°o indexes cho user_interactions
        await supabase.rpc('execute_sql', {
            sql_query: `
                CREATE INDEX IF NOT EXISTS idx_user_interactions_current_mode
                ON user_interactions(current_mode);

                CREATE INDEX IF NOT EXISTS idx_user_interactions_last_mode_change
                ON user_interactions(last_mode_change);
            `,
            sql_params: []
        })

        // 7. C·∫≠p nh·∫≠t d·ªØ li·ªáu hi·ªán c√≥
        console.log('üîÑ Updating existing data...')

        // C·∫≠p nh·∫≠t user_interactions ƒë·ªÉ c√≥ current_mode m·∫∑c ƒë·ªãnh
        await supabase.rpc('execute_sql', {
            sql_query: `
                UPDATE user_interactions
                SET current_mode = 'choosing'
                WHERE current_mode IS NULL;
            `,
            sql_params: []
        })

        // C·∫≠p nh·∫≠t users ƒë·ªÉ c√≥ last_welcome_sent m·∫∑c ƒë·ªãnh
        await supabase.rpc('execute_sql', {
            sql_query: `
                UPDATE users
                SET last_welcome_sent = NOW()
                WHERE welcome_sent = true AND last_welcome_sent IS NULL;
            `,
            sql_params: []
        })

        console.log('‚úÖ Database schema fix completed successfully!')

        // 8. Ki·ªÉm tra k·∫øt qu·∫£
        console.log('üîç Verifying fixes...')

        const { data: settingsCheck } = await supabase
            .from('bot_settings')
            .select('*')
            .limit(3)

        const { data: usersCheck } = await supabase
            .from('users')
            .select('facebook_id, welcome_sent, last_welcome_sent')
            .limit(3)

        const { data: interactionsCheck } = await supabase
            .from('user_interactions')
            .select('facebook_id, current_mode, last_mode_change')
            .limit(3)

        console.log('‚öôÔ∏è Bot settings:', settingsCheck)
        console.log('üë• Users sample:', usersCheck)
        console.log('üîó Interactions sample:', interactionsCheck)

        console.log('üéâ All fixes applied successfully!')

    } catch (error) {
        console.error('‚ùå Error fixing database schema:', error)
        process.exit(1)
    }
}

// Ch·∫°y script
fixDatabaseSchema()