/**
 * Script ƒë·ªÉ l√†m s·∫°ch database Supabase
 * Ch·∫°y script n√†y ƒë·ªÉ reset to√†n b·ªô d·ªØ li·ªáu v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
 */

const { createClient } = require('@supabase/supabase-js')

// C·∫•u h√¨nh Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Thi·∫øu c·∫•u h√¨nh Supabase!')
    console.error('C·∫ßn c√≥ NEXT_PUBLIC_SUPABASE_URL v√† SUPABASE_SERVICE_ROLE_KEY')
    process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function cleanupDatabase() {
    console.log('üßπ B·∫Øt ƒë·∫ßu l√†m s·∫°ch database...')

    try {
        // 1. X√≥a t·∫•t c·∫£ d·ªØ li·ªáu trong c√°c b·∫£ng ch√≠nh
        console.log('üìù X√≥a d·ªØ li·ªáu trong c√°c b·∫£ng...')

        // Th·ª© t·ª± x√≥a quan tr·ªçng ƒë·ªÉ tr√°nh foreign key constraints
        // X√≥a t·ª´ b·∫£ng con ƒë·∫øn b·∫£ng cha
        const tables = [
            // B·∫£ng kh√¥ng c√≥ foreign key dependencies
            'user_messages',
            'spam_logs',
            'spam_tracking',
            'chat_bot_offer_counts',
            'user_bot_modes',
            'bot_sessions',
            'admin_chat_sessions',
            'user_activities',
            'user_activity_logs',
            'system_metrics',
            'ai_analytics',
            'ai_templates',
            'admin_users',
            'bot_settings',

            // B·∫£ng c√≥ foreign key ƒë·∫øn users nh∆∞ng kh√¥ng c√≥ b·∫£ng kh√°c ph·ª• thu·ªôc
            'point_transactions',
            'user_points',
            'referrals',
            'search_requests',
            'ads',
            'notifications',
            'event_participants',
            'events',
            'ratings',
            'payments',
            'listings',
            'conversations',
            'messages',
            'user_interactions',

            // B·∫£ng ch√≠nh - users (cu·ªëi c√πng)
            'users'
        ]

        for (const table of tables) {
            try {
                let deleteQuery = supabase.from(table).delete()

                // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho t·ª´ng b·∫£ng d·ª±a tr√™n ki·ªÉu d·ªØ li·ªáu c·ªßa c·ªôt id
                switch (table) {
                    case 'user_messages':
                    case 'spam_logs':
                    case 'admin_users':
                    case 'bot_settings':
                        // C√°c b·∫£ng c√≥ id l√† SERIAL (INTEGER) - x√≥a t·∫•t c·∫£
                        deleteQuery = deleteQuery.gte('id', 0)
                        break
                    case 'chat_bot_offer_counts':
                    case 'user_bot_modes':
                        // C√°c b·∫£ng c√≥ id l√† BIGSERIAL (BIGINT) - x√≥a t·∫•t c·∫£
                        deleteQuery = deleteQuery.gte('id', 0)
                        break
                    case 'users':
                        // B·∫£ng users - x√≥a t·∫•t c·∫£ tr·ª´ admin
                        deleteQuery = deleteQuery.neq('facebook_id', process.env.FACEBOOK_PAGE_ID)
                        break
                    default:
                        // C√°c b·∫£ng c√≥ id l√† UUID - x√≥a t·∫•t c·∫£
                        deleteQuery = deleteQuery.gte('id', '00000000-0000-0000-0000-000000000000')
                        break
                }

                const { error } = await deleteQuery

                if (error) {
                    console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a b·∫£ng ${table}:`, error.message)
                } else {
                    console.log(`‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu trong b·∫£ng ${table}`)
                }
            } catch (err) {
                console.log(`‚ö†Ô∏è B·∫£ng ${table} c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i:`, err.message)
            }
        }

        // 2. Users ƒë√£ ƒë∆∞·ª£c x√≥a trong v√≤ng l·∫∑p tr√™n

        // 2. Reset bot settings
        console.log('ü§ñ Reset bot settings...')
        const { error: settingsError } = await supabase
            .from('bot_settings')
            .upsert({
                key: 'bot_status',
                value: 'active',
                description: 'Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa bot'
            })

        if (settingsError) {
            console.log('‚ö†Ô∏è L·ªói khi reset bot settings:', settingsError.message)
        } else {
            console.log('‚úÖ ƒê√£ reset bot settings')
        }

        // 3. T·∫°o admin user m·∫∑c ƒë·ªãnh (n·∫øu ch∆∞a c√≥)
        console.log('üëë T·∫°o admin user m·∫∑c ƒë·ªãnh...')
        const facebookPageId = process.env.FACEBOOK_PAGE_ID

        if (facebookPageId) {
            const { data: existingAdmin } = await supabase
                .from('users')
                .select('*')
                .eq('facebook_id', facebookPageId)
                .single()

            if (!existingAdmin) {
                const { error: adminError } = await supabase
                    .from('users')
                    .insert({
                        facebook_id: facebookPageId,
                        name: 'Admin T√¢n D·∫≠u',
                        phone: '0000000000',
                        location: 'H√† N·ªôi',
                        birthday: 1981,
                        status: 'active',
                        membership_expires_at: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),
                        referral_code: 'ADMIN-1981',
                        welcome_message_sent: true,
                        created_at: new Date().toISOString()
                    })

                if (adminError) {
                    console.log('‚ö†Ô∏è L·ªói khi t·∫°o admin user:', adminError.message)
                } else {
                    console.log('‚úÖ ƒê√£ t·∫°o admin user m·∫∑c ƒë·ªãnh')
                }
            } else {
                console.log('‚úÖ Admin user ƒë√£ t·ªìn t·∫°i')
            }
        } else {
            console.log('‚ö†Ô∏è Kh√¥ng c√≥ FACEBOOK_PAGE_ID, b·ªè qua t·∫°o admin user')
        }

        console.log('üéâ Ho√†n th√†nh l√†m s·∫°ch database!')
        console.log('üìä Database ƒë√£ ƒë∆∞·ª£c reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu')
        console.log('üîß Bot s·∫Ω ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng v·ªõi d·ªØ li·ªáu s·∫°ch')

    } catch (error) {
        console.error('‚ùå L·ªói khi l√†m s·∫°ch database:', error)
    }
}

// Ch·∫°y cleanup
cleanupDatabase()
