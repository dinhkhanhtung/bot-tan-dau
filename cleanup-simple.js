/**
 * Script cleanup ƒë∆°n gi·∫£n - x√≥a c√°c file test v√† chu·∫©n b·ªã cho production
 */

const fs = require('fs')
const path = require('path')

async function cleanupForProduction() {
    console.log('üöÄ CHU·∫®N B·ªä BOT CHO PRODUCTION')
    console.log('='.repeat(50))

    // Danh s√°ch c√°c file test c·∫ßn x√≥a
    const testFiles = [
        'test-facebook-api-fix.js',
        'test-new-user.js',
        'test-pending-user.js',
        'cleanup-test-users.js',
        'cleanup-production-ready.js',
        'cleanup-simple.js',
        'check-admins-temp.js',
        'check-database.js',
        'check-facebook.js',
        'check-system.js',
        'cleanup-admins.js',
        'cleanup-old-admins.js',
        'manage-admin.js',
        'reset-bot.js',
        'setup-admin.js',
        'simple-reset.js',
        'add-admin.js',
        'tatus' // File l·ªói
    ]

    console.log('\n1Ô∏è‚É£ X√≥a c√°c file test scripts...')
    let deletedFiles = 0

    for (const file of testFiles) {
        try {
            if (fs.existsSync(file)) {
                fs.unlinkSync(file)
                console.log(`‚úÖ ƒê√£ x√≥a: ${file}`)
                deletedFiles++
            } else {
                console.log(`‚ÑπÔ∏è  Kh√¥ng t√¨m th·∫•y: ${file}`)
            }
        } catch (error) {
            console.error(`‚ùå L·ªói x√≥a ${file}:`, error.message)
        }
    }

    console.log('\n2Ô∏è‚É£ Ki·ªÉm tra c√°c file c·∫ßn thi·∫øt cho production...')
    const requiredFiles = [
        'package.json',
        'next.config.js',
        'src/app/api/webhook/route.ts',
        'src/lib/core/unified-entry-point.ts',
        'src/lib/utils.ts'
    ]

    let missingFiles = 0
    for (const file of requiredFiles) {
        if (fs.existsSync(file)) {
            console.log(`‚úÖ C√≥: ${file}`)
        } else {
            console.log(`‚ùå Thi·∫øu: ${file}`)
            missingFiles++
        }
    }

    console.log('\n3Ô∏è‚É£ Ki·ªÉm tra c·∫•u tr√∫c th∆∞ m·ª•c...')
    const requiredDirs = [
        'src/app/api',
        'src/lib/core',
        'src/lib/flows',
        'src/lib/handlers'
    ]

    for (const dir of requiredDirs) {
        if (fs.existsSync(dir)) {
            console.log(`‚úÖ C√≥ th∆∞ m·ª•c: ${dir}`)
        } else {
            console.log(`‚ùå Thi·∫øu th∆∞ m·ª•c: ${dir}`)
            missingFiles++
        }
    }

    console.log('\n4Ô∏è‚É£ T·∫°o file .env t·ª´ env.example...')
    try {
        if (fs.existsSync('env.example') && !fs.existsSync('.env')) {
            fs.copyFileSync('env.example', '.env')
            console.log('‚úÖ ƒê√£ t·∫°o .env t·ª´ env.example')
            console.log('‚ö†Ô∏è  H√£y c·∫≠p nh·∫≠t c√°c gi√° tr·ªã th·∫≠t trong file .env')
        } else if (fs.existsSync('.env')) {
            console.log('‚úÖ File .env ƒë√£ t·ªìn t·∫°i')
        } else {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y env.example')
        }
    } catch (error) {
        console.error('‚ùå L·ªói t·∫°o .env:', error.message)
    }

    console.log('\n5Ô∏è‚É£ Ki·ªÉm tra package.json...')
    try {
        const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'))
        console.log(`‚úÖ Package: ${packageJson.name}`)
        console.log(`‚úÖ Version: ${packageJson.version}`)
        console.log(`‚úÖ Scripts: ${Object.keys(packageJson.scripts || {}).join(', ')}`)
    } catch (error) {
        console.error('‚ùå L·ªói ƒë·ªçc package.json:', error.message)
    }

    console.log('\nüéâ CLEANUP HO√ÄN TH√ÄNH!')
    console.log('='.repeat(50))
    console.log(`üìä T·ªïng k·∫øt:`)
    console.log(`   - ƒê√£ x√≥a ${deletedFiles} file test`)
    console.log(`   - Thi·∫øu ${missingFiles} file/directory c·∫ßn thi·∫øt`)

    if (missingFiles === 0) {
        console.log('\n‚úÖ BOT ƒê√É S·∫¥N S√ÄNG CHO PRODUCTION!')
        console.log('\nüìù C√°c b∆∞·ªõc ti·∫øp theo:')
        console.log('   1. C·∫≠p nh·∫≠t file .env v·ªõi c√°c gi√° tr·ªã th·∫≠t')
        console.log('   2. Ch·∫°y: npm install')
        console.log('   3. Ch·∫°y: npm run build')
        console.log('   4. Deploy l√™n Vercel ho·∫∑c server')
        console.log('   5. Test v·ªõi user Facebook th·∫≠t')
    } else {
        console.log('\n‚ö†Ô∏è  C·∫ßn kh·∫Øc ph·ª•c c√°c file/directory thi·∫øu tr∆∞·ªõc khi deploy')
    }
}

// Ch·∫°y script
cleanupForProduction()
